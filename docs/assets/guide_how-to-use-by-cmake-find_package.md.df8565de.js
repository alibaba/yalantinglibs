import{_ as a,c as s,o as n,a as e}from"./app.3b6e8018.js";const g=JSON.parse('{"title":"Use by CMake find_package","description":"","frontmatter":{},"headers":[{"level":2,"title":"Install yaLanTingLibs","slug":"install-yalantinglibs","link":"#install-yalantinglibs","children":[]},{"level":2,"title":"Use yaLanTingLibs","slug":"use-yalantinglibs","link":"#use-yalantinglibs","children":[]},{"level":2,"title":"Reference","slug":"reference","link":"#reference","children":[]}],"relativePath":"guide/how-to-use-by-cmake-find_package.md","lastUpdated":null}'),l={name:"guide/how-to-use-by-cmake-find_package.md"},i=e(`<h1 id="use-by-cmake-find-package" tabindex="-1">Use by CMake find_package <a class="header-anchor" href="#use-by-cmake-find-package" aria-hidden="true">#</a></h1><p>To use CMake find_package, CMake and yaLanTingLibs must be installed first.</p><p>And you have to use CMake to manage your project.</p><h2 id="install-yalantinglibs" tabindex="-1">Install yaLanTingLibs <a class="header-anchor" href="#install-yalantinglibs" aria-hidden="true">#</a></h2><p>Currently, only build from sources supported. Install from package manager (e.g. conan and vcpkg) is WIP.</p><p>use the following instructions</p><ul><li>clone yaLanTingLibs</li></ul><div class="language-shell"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki"><code><span class="line"><span style="color:#A6ACCD;">git clone https://github.com/alibaba/yalantinglibs.git</span></span>
<span class="line"><span style="color:#82AAFF;">cd</span><span style="color:#A6ACCD;"> yalantinglibs</span></span>
<span class="line"></span></code></pre></div><ul><li>build yaLanTingLibs</li></ul><div class="language-shell"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki"><code><span class="line"><span style="color:#A6ACCD;">mkdir build </span><span style="color:#89DDFF;">&amp;&amp;</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">cd</span><span style="color:#A6ACCD;"> build</span></span>
<span class="line"><span style="color:#A6ACCD;">cmake ..</span></span>
<span class="line"><span style="color:#A6ACCD;">make -j</span></span>
<span class="line"></span></code></pre></div><ul><li>install yaLanTingLibs</li></ul><div class="language-shell"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki"><code><span class="line"><span style="color:#676E95;"># sudo if needed</span></span>
<span class="line"><span style="color:#A6ACCD;">make install </span></span>
<span class="line"></span></code></pre></div><h2 id="use-yalantinglibs" tabindex="-1">Use yaLanTingLibs <a class="header-anchor" href="#use-yalantinglibs" aria-hidden="true">#</a></h2><p>write <code>CMakeLists.txt</code> and use find_package</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki"><code><span class="line"><span style="color:#A6ACCD;">cmake_minimum_required(VERSION 3.15)</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">project(awesome-solution LANGUAGES CXX)</span></span>
<span class="line"><span style="color:#A6ACCD;">set(CMAKE_CXX_STANDARD 20)</span></span>
<span class="line"><span style="color:#A6ACCD;">set(CMAKE_CXX_STANDARD_REQUIRED ON)</span></span>
<span class="line"><span style="color:#A6ACCD;"># it&#39;s very important to set the compiler flags</span></span>
<span class="line"><span style="color:#A6ACCD;"># if you use gcc/g++</span></span>
<span class="line"><span style="color:#A6ACCD;">if (CMAKE_CXX_COMPILER_ID STREQUAL &quot;GNU&quot;)</span></span>
<span class="line"><span style="color:#A6ACCD;">    set(CMAKE_CXX_FLAGS &quot;\${CMAKE_CXX_FLAGS} -fcoroutines&quot;)</span></span>
<span class="line"><span style="color:#A6ACCD;">    if (CMAKE_CXX_COMPILER_VERSION MATCHES &quot;12.*&quot;)</span></span>
<span class="line"><span style="color:#A6ACCD;">        set(CMAKE_CXX_FLAGS &quot;\${CMAKE_CXX_FLAGS} -Wno-maybe-uninitialized&quot;)</span></span>
<span class="line"><span style="color:#A6ACCD;">    endif()</span></span>
<span class="line"><span style="color:#A6ACCD;">endif()</span></span>
<span class="line"><span style="color:#A6ACCD;">set(CMAKE_EXPORT_COMPILE_COMMANDS ON)</span></span>
<span class="line"><span style="color:#A6ACCD;">find_package(Threads REQUIRED)</span></span>
<span class="line"><span style="color:#A6ACCD;">find_package(yalantinglibs REQUIRED)</span></span>
<span class="line"><span style="color:#A6ACCD;"># add your server</span></span>
<span class="line"><span style="color:#A6ACCD;">target_link_libraries(your_server PRIVATE yalantinglibs::coro_rpc)</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p>the full demo is here: <a href="https://github.com/PikachuHyA/yalantinglibs_find_package_demo" target="_blank" rel="noreferrer">https://github.com/PikachuHyA/yalantinglibs_find_package_demo</a></p><h2 id="reference" tabindex="-1">Reference <a class="header-anchor" href="#reference" aria-hidden="true">#</a></h2><ul><li><a href="https://cmake.org/cmake/help/latest/command/find_package.html?highlight=find_package" target="_blank" rel="noreferrer">CMake find_package Document</a></li><li><a href="https://github.com/PikachuHyA/yalantinglibs_find_package_demo" target="_blank" rel="noreferrer">use yaLanTingLibs with CMake find_package demo code</a></li><li><a href="https://github.com/PikachuHyA/yalantinglibs_as_submodule_demo" target="_blank" rel="noreferrer">use yaLanTingLibs as Git Submodule demo code</a></li></ul>`,18),p=[i];function t(o,c,r,d,C,u){return n(),s("div",null,p)}const y=a(l,[["render",t]]);export{g as __pageData,y as default};
