import{_ as s,c as a,o as n,a as l}from"./app.3b6e8018.js";const p="/yalantinglibs/assets/struct_pack_bench.652b03dd.png",A=JSON.parse('{"title":"struct_pack Introduction","description":"","frontmatter":{},"headers":[{"level":2,"title":"Serialization","slug":"serialization","link":"#serialization","children":[{"level":3,"title":"Basic Usage","slug":"basic-usage","link":"#basic-usage","children":[]},{"level":3,"title":"Explicit data container","slug":"explicit-data-container","link":"#explicit-data-container","children":[]},{"level":3,"title":"Append the result at the end of existing data container","slug":"append-the-result-at-the-end-of-existing-data-container","link":"#append-the-result-at-the-end-of-existing-data-container","children":[]},{"level":3,"title":"Save the results to memory location indicated by pointer","slug":"save-the-results-to-memory-location-indicated-by-pointer","link":"#save-the-results-to-memory-location-indicated-by-pointer","children":[]},{"level":3,"title":"Multi-parameter serialization","slug":"multi-parameter-serialization","link":"#multi-parameter-serialization","children":[]},{"level":3,"title":"Save the results to output stream","slug":"save-the-results-to-output-stream","link":"#save-the-results-to-output-stream","children":[]}]},{"level":2,"title":"Deserialization","slug":"deserialization","link":"#deserialization","children":[{"level":3,"title":"Basic Usage","slug":"basic-usage-1","link":"#basic-usage-1","children":[]},{"level":3,"title":"deserialize from pointers","slug":"deserialize-from-pointers","link":"#deserialize-from-pointers","children":[]},{"level":3,"title":"deserialize to an existing object","slug":"deserialize-to-an-existing-object","link":"#deserialize-to-an-existing-object","children":[]},{"level":3,"title":"Multi-parameter deserialization","slug":"multi-parameter-deserialization","link":"#multi-parameter-deserialization","children":[]},{"level":3,"title":"deserialize to input stream","slug":"deserialize-to-input-stream","link":"#deserialize-to-input-stream","children":[]},{"level":3,"title":"Partial deserialization","slug":"partial-deserialization","link":"#partial-deserialization","children":[]}]},{"level":2,"title":"support std containers, std::optional and custom containers","slug":"support-std-containers-std-optional-and-custom-containers","link":"#support-std-containers-std-optional-and-custom-containers","children":[]},{"level":2,"title":"custom support","slug":"custom-support","link":"#custom-support","children":[{"level":3,"title":"custom type","slug":"custom-type","link":"#custom-type","children":[]},{"level":3,"title":"custom output stream","slug":"custom-output-stream","link":"#custom-output-stream","children":[]},{"level":3,"title":"custom input stream","slug":"custom-input-stream","link":"#custom-input-stream","children":[]}]},{"level":2,"title":"varint support","slug":"varint-support","link":"#varint-support","children":[]},{"level":2,"title":"benchmark","slug":"benchmark","link":"#benchmark","children":[{"level":3,"title":"Test case","slug":"test-case","link":"#test-case","children":[]},{"level":3,"title":"Test objects","slug":"test-objects","link":"#test-objects","children":[]},{"level":3,"title":"Test Environment","slug":"test-environment","link":"#test-environment","children":[]},{"level":3,"title":"Test results","slug":"test-results","link":"#test-results","children":[]}]},{"level":2,"title":"Forward/backward compatibility","slug":"forward-backward-compatibility","link":"#forward-backward-compatibility","children":[]},{"level":2,"title":"Why is struct_pack faster?","slug":"why-is-struct-pack-faster","link":"#why-is-struct-pack-faster","children":[]},{"level":2,"title":"Appendix","slug":"appendix","link":"#appendix","children":[{"level":3,"title":"struct_pack type system","slug":"struct-pack-type-system","link":"#struct-pack-type-system","children":[]},{"level":3,"title":"struct_pack layout","slug":"struct-pack-layout","link":"#struct-pack-layout","children":[]},{"level":3,"title":"Test code","slug":"test-code","link":"#test-code","children":[]}]}],"relativePath":"guide/struct-pack-intro.md","lastUpdated":null}'),o={name:"guide/struct-pack-intro.md"},e=l(`<h1 id="struct-pack-introduction" tabindex="-1">struct_pack Introduction <a class="header-anchor" href="#struct-pack-introduction" aria-hidden="true">#</a></h1><p>struct_pack is a serialization library featuring zero-cost abstraction as well as usability. In struct_pack, the serialization or deserialization of one complex structure could easily be done in a single line of code, without any DSL, macro, or template to be defined. struct_pack supports the serialization of C++ structures through compile-time reflection and its performance is significantly better than protobuf and msgpack (see the benchmark section for details).</p><p>Below, we show the basic usage of struct_pack with a simple object as an example.</p><div class="language-cpp"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki"><code><span class="line"><span style="color:#C792EA;">struct</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">person</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">int64_t</span><span style="color:#F07178;"> id</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#FFCB6B;">std</span><span style="color:#89DDFF;">::</span><span style="color:#F07178;">string name</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">int</span><span style="color:#F07178;"> age</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">double</span><span style="color:#F07178;"> salary</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">person person1</span><span style="color:#89DDFF;">{</span><span style="color:#F07178;">.id </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> .name </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">hello struct pack</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> .age </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">20</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> .salary </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">1024.42</span><span style="color:#89DDFF;">};</span></span>
<span class="line"></span></code></pre></div><h2 id="serialization" tabindex="-1">Serialization <a class="header-anchor" href="#serialization" aria-hidden="true">#</a></h2><p>In below we demonstrate serval ways of serialize one object with struct_pack APIs.</p><h3 id="basic-usage" tabindex="-1">Basic Usage <a class="header-anchor" href="#basic-usage" aria-hidden="true">#</a></h3><div class="language-cpp"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki"><code><span class="line"><span style="color:#676E95;">// serialization in one line</span></span>
<span class="line"><span style="color:#FFCB6B;">std</span><span style="color:#89DDFF;">::</span><span style="color:#A6ACCD;">vector</span><span style="color:#89DDFF;">&lt;</span><span style="color:#C792EA;">char</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> result </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">struct_pack</span><span style="color:#89DDFF;">::</span><span style="color:#82AAFF;">serialize</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">person1</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span></code></pre></div><h3 id="explicit-data-container" tabindex="-1">Explicit data container <a class="header-anchor" href="#explicit-data-container" aria-hidden="true">#</a></h3><div class="language-cpp"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki"><code><span class="line"><span style="color:#C792EA;">auto</span><span style="color:#A6ACCD;"> result </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">struct_pack</span><span style="color:#89DDFF;">::</span><span style="color:#82AAFF;">serialize</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">std</span><span style="color:#89DDFF;">::</span><span style="color:#FFCB6B;">string</span><span style="color:#89DDFF;">&gt;(</span><span style="color:#A6ACCD;">person1</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#676E95;">// explicitly use std::string instead of std::vector&lt;char&gt; to hold the result</span></span>
<span class="line"></span></code></pre></div><h3 id="append-the-result-at-the-end-of-existing-data-container" tabindex="-1">Append the result at the end of existing data container <a class="header-anchor" href="#append-the-result-at-the-end-of-existing-data-container" aria-hidden="true">#</a></h3><div class="language-cpp"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki"><code><span class="line"><span style="color:#FFCB6B;">std</span><span style="color:#89DDFF;">::</span><span style="color:#A6ACCD;">string result</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">The next line is struct_pack serialize result.</span><span style="color:#A6ACCD;">\\n</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C792EA;">auto</span><span style="color:#A6ACCD;"> result </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">struct_pack</span><span style="color:#89DDFF;">::</span><span style="color:#82AAFF;">serialize_to</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">result</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;">person1</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#676E95;">// </span></span>
<span class="line"></span></code></pre></div><h3 id="save-the-results-to-memory-location-indicated-by-pointer" tabindex="-1">Save the results to memory location indicated by pointer <a class="header-anchor" href="#save-the-results-to-memory-location-indicated-by-pointer" aria-hidden="true">#</a></h3><div class="language-cpp"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki"><code><span class="line"><span style="color:#C792EA;">auto</span><span style="color:#A6ACCD;"> sz</span><span style="color:#89DDFF;">=</span><span style="color:#FFCB6B;">struct_pack</span><span style="color:#89DDFF;">::</span><span style="color:#82AAFF;">get_needed_siarray</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">person1</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#FFCB6B;">std</span><span style="color:#89DDFF;">::</span><span style="color:#A6ACCD;">unique_ptr array</span><span style="color:#89DDFF;">=</span><span style="color:#FFCB6B;">std</span><span style="color:#89DDFF;">::</span><span style="color:#82AAFF;">make_unique</span><span style="color:#89DDFF;">&lt;</span><span style="color:#C792EA;">char</span><span style="color:#A6ACCD;">[]</span><span style="color:#89DDFF;">&gt;(</span><span style="color:#A6ACCD;">sz</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#C792EA;">auto</span><span style="color:#A6ACCD;"> result </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">struct_pack</span><span style="color:#89DDFF;">::</span><span style="color:#82AAFF;">serialize_to</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">array</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">get</span><span style="color:#89DDFF;">(),</span><span style="color:#A6ACCD;">sz</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;">person1</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#676E95;">// save the result at given memory location by pointer</span></span>
<span class="line"></span></code></pre></div><h3 id="multi-parameter-serialization" tabindex="-1">Multi-parameter serialization <a class="header-anchor" href="#multi-parameter-serialization" aria-hidden="true">#</a></h3><div class="language-cpp"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki"><code><span class="line"><span style="color:#C792EA;">auto</span><span style="color:#A6ACCD;"> result</span><span style="color:#89DDFF;">=</span><span style="color:#FFCB6B;">struct_pack</span><span style="color:#89DDFF;">::</span><span style="color:#82AAFF;">serialize</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">person1</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">id</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> person1</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">name</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> person1</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">age</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> person1</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">salary</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#676E95;">//serialize as std::tuple&lt;int64_t, std::string, int, double&gt;</span></span>
<span class="line"></span></code></pre></div><h3 id="save-the-results-to-output-stream" tabindex="-1">Save the results to output stream <a class="header-anchor" href="#save-the-results-to-output-stream" aria-hidden="true">#</a></h3><div class="language-cpp"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki"><code><span class="line"><span style="color:#FFCB6B;">std</span><span style="color:#89DDFF;">::</span><span style="color:#FFCB6B;">ofstream</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">writer</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">struct_pack_demo.data</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">                      </span><span style="color:#FFCB6B;">std</span><span style="color:#89DDFF;">::</span><span style="color:#FFCB6B;">ofstream</span><span style="color:#89DDFF;">::</span><span style="color:#FFCB6B;">out</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">std</span><span style="color:#89DDFF;">::</span><span style="color:#FFCB6B;">ofstream</span><span style="color:#89DDFF;">::</span><span style="color:#FFCB6B;">binary</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#FFCB6B;">struct_pack</span><span style="color:#89DDFF;">::</span><span style="color:#82AAFF;">serialize_to</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">writer</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> person1</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span></code></pre></div><h2 id="deserialization" tabindex="-1">Deserialization <a class="header-anchor" href="#deserialization" aria-hidden="true">#</a></h2><p>In below we demonstrate serval ways of deserialize one object with struct_pack APIs.</p><h3 id="basic-usage-1" tabindex="-1">Basic Usage <a class="header-anchor" href="#basic-usage-1" aria-hidden="true">#</a></h3><div class="language-cpp"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki"><code><span class="line"><span style="color:#676E95;">// deserialize in one line</span></span>
<span class="line"><span style="color:#C792EA;">auto</span><span style="color:#A6ACCD;"> person2 </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">deserialize</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">person</span><span style="color:#89DDFF;">&gt;(</span><span style="color:#A6ACCD;">buffer</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#82AAFF;">assert</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">person2</span><span style="color:#89DDFF;">);</span><span style="color:#676E95;"> // person2.has_value() == true</span></span>
<span class="line"><span style="color:#82AAFF;">assert</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">person2</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">value</span><span style="color:#89DDFF;">()==</span><span style="color:#A6ACCD;">person1</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span></code></pre></div><h3 id="deserialize-from-pointers" tabindex="-1">deserialize from pointers <a class="header-anchor" href="#deserialize-from-pointers" aria-hidden="true">#</a></h3><div class="language-cpp"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki"><code><span class="line"><span style="color:#676E95;">// deserialize from memory location indicated by pointers</span></span>
<span class="line"><span style="color:#C792EA;">auto</span><span style="color:#A6ACCD;"> person2 </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">deserialize</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">person</span><span style="color:#89DDFF;">&gt;(</span><span style="color:#A6ACCD;">buffer</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">data</span><span style="color:#89DDFF;">(),</span><span style="color:#A6ACCD;">buffer</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">size</span><span style="color:#89DDFF;">());</span></span>
<span class="line"><span style="color:#82AAFF;">assert</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">person2</span><span style="color:#89DDFF;">);</span><span style="color:#676E95;"> //person2.has_value() == true</span></span>
<span class="line"><span style="color:#82AAFF;">assert</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">person2</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">value</span><span style="color:#89DDFF;">()==</span><span style="color:#A6ACCD;">person1</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span></code></pre></div><h3 id="deserialize-to-an-existing-object" tabindex="-1">deserialize to an existing object <a class="header-anchor" href="#deserialize-to-an-existing-object" aria-hidden="true">#</a></h3><div class="language-cpp"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki"><code><span class="line"><span style="color:#676E95;">// deserialize to an existing object</span></span>
<span class="line"><span style="color:#A6ACCD;">person person2</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#FFCB6B;">std</span><span style="color:#89DDFF;">::</span><span style="color:#A6ACCD;">errc ec </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">deserialize_to</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">person2</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> buffer</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#82AAFF;">assert</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">ec</span><span style="color:#89DDFF;">==</span><span style="color:#FFCB6B;">std</span><span style="color:#89DDFF;">::</span><span style="color:#A6ACCD;">errc{}</span><span style="color:#89DDFF;">);</span><span style="color:#676E95;"> // person2.has_value() == true</span></span>
<span class="line"><span style="color:#82AAFF;">assert</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">person2</span><span style="color:#89DDFF;">==</span><span style="color:#A6ACCD;">person1</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span></code></pre></div><h3 id="multi-parameter-deserialization" tabindex="-1">Multi-parameter deserialization <a class="header-anchor" href="#multi-parameter-deserialization" aria-hidden="true">#</a></h3><div class="language-cpp"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki"><code><span class="line"><span style="color:#C792EA;">auto</span><span style="color:#A6ACCD;"> person2 </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">deserialize</span><span style="color:#89DDFF;">&lt;</span><span style="color:#C792EA;">int64_t</span><span style="color:#89DDFF;">,</span><span style="color:#FFCB6B;">std</span><span style="color:#89DDFF;">::</span><span style="color:#FFCB6B;">string</span><span style="color:#89DDFF;">,</span><span style="color:#C792EA;">int</span><span style="color:#89DDFF;">,</span><span style="color:#C792EA;">double</span><span style="color:#89DDFF;">&gt;(</span><span style="color:#A6ACCD;">buffer</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#82AAFF;">assert</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">person2</span><span style="color:#89DDFF;">);</span><span style="color:#676E95;"> // person2.has_value() == true</span></span>
<span class="line"><span style="color:#C792EA;">auto</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&amp;&amp;[</span><span style="color:#A6ACCD;">id</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;">name</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;">age</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;">salary</span><span style="color:#89DDFF;">]=</span><span style="color:#A6ACCD;">person2</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">value</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#82AAFF;">assert</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">person1</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">id</span><span style="color:#89DDFF;">==</span><span style="color:#A6ACCD;">id</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#82AAFF;">assert</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">person1</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">name</span><span style="color:#89DDFF;">==</span><span style="color:#A6ACCD;">name</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#82AAFF;">assert</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">person1</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">age</span><span style="color:#89DDFF;">==</span><span style="color:#A6ACCD;">age</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#82AAFF;">assert</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">person1</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">salary</span><span style="color:#89DDFF;">==</span><span style="color:#A6ACCD;">salary</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span></code></pre></div><h3 id="deserialize-to-input-stream" tabindex="-1">deserialize to input stream <a class="header-anchor" href="#deserialize-to-input-stream" aria-hidden="true">#</a></h3><div class="language-cpp"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki"><code><span class="line"><span style="color:#FFCB6B;">std</span><span style="color:#89DDFF;">::</span><span style="color:#FFCB6B;">ifstream</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">ifs</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">struct_pack_demo.data</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">                  </span><span style="color:#FFCB6B;">std</span><span style="color:#89DDFF;">::</span><span style="color:#FFCB6B;">ofstream</span><span style="color:#89DDFF;">::</span><span style="color:#FFCB6B;">in</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">std</span><span style="color:#89DDFF;">::</span><span style="color:#FFCB6B;">ofstream</span><span style="color:#89DDFF;">::</span><span style="color:#FFCB6B;">binary</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#C792EA;">auto</span><span style="color:#A6ACCD;"> person2 </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">struct_pack</span><span style="color:#89DDFF;">::</span><span style="color:#82AAFF;">deserialize</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">person</span><span style="color:#89DDFF;">&gt;(</span><span style="color:#A6ACCD;">ifs</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#82AAFF;">assert</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">person2 </span><span style="color:#89DDFF;">==</span><span style="color:#A6ACCD;"> person1</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span></code></pre></div><h3 id="partial-deserialization" tabindex="-1">Partial deserialization <a class="header-anchor" href="#partial-deserialization" aria-hidden="true">#</a></h3><p>Sometimes users only need to deserialize specific fields of an object instead of all of them, and that&#39;s when the partial deserialization feature can be used. This can avoid full deserialization and improve efficiency significantly, eg.:</p><div class="language-cpp"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki"><code><span class="line"><span style="color:#676E95;">// Just deserialize the 2nd field of person </span></span>
<span class="line"><span style="color:#C792EA;">auto</span><span style="color:#A6ACCD;"> name </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">get_field</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">person</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">&gt;(</span><span style="color:#A6ACCD;">buffer</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">data</span><span style="color:#89DDFF;">(),</span><span style="color:#A6ACCD;"> buffer</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">size</span><span style="color:#89DDFF;">());</span></span>
<span class="line"><span style="color:#82AAFF;">assert</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">name</span><span style="color:#89DDFF;">);</span><span style="color:#676E95;"> // name.has_value() == true</span></span>
<span class="line"><span style="color:#82AAFF;">assert</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">name</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">value</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">==</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">hello struct pack</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span></code></pre></div><h2 id="support-std-containers-std-optional-and-custom-containers" tabindex="-1">support std containers, std::optional and custom containers <a class="header-anchor" href="#support-std-containers-std-optional-and-custom-containers" aria-hidden="true">#</a></h2><p>For example, the library supports the following complicated objects with std containers and std::optional fields:</p><div class="language-cpp"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki"><code><span class="line"><span style="color:#C792EA;">enum</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">class</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">Color</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">red</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">black</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">white</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">struct</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">complicated_object</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  Color color</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">int</span><span style="color:#F07178;"> a</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#FFCB6B;">std</span><span style="color:#89DDFF;">::</span><span style="color:#F07178;">string b</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#FFCB6B;">std</span><span style="color:#89DDFF;">::</span><span style="color:#F07178;">vector</span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">person</span><span style="color:#89DDFF;">&gt;</span><span style="color:#F07178;"> c</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#FFCB6B;">std</span><span style="color:#89DDFF;">::</span><span style="color:#F07178;">list</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">std</span><span style="color:#89DDFF;">::</span><span style="color:#F07178;">string</span><span style="color:#89DDFF;">&gt;</span><span style="color:#F07178;"> d</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#FFCB6B;">std</span><span style="color:#89DDFF;">::</span><span style="color:#F07178;">deque</span><span style="color:#89DDFF;">&lt;</span><span style="color:#C792EA;">int</span><span style="color:#89DDFF;">&gt;</span><span style="color:#F07178;"> e</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#FFCB6B;">std</span><span style="color:#89DDFF;">::</span><span style="color:#F07178;">map</span><span style="color:#89DDFF;">&lt;</span><span style="color:#C792EA;">int</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> person</span><span style="color:#89DDFF;">&gt;</span><span style="color:#F07178;"> f</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#FFCB6B;">std</span><span style="color:#89DDFF;">::</span><span style="color:#F07178;">multimap</span><span style="color:#89DDFF;">&lt;</span><span style="color:#C792EA;">int</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> person</span><span style="color:#89DDFF;">&gt;</span><span style="color:#F07178;"> g</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#FFCB6B;">std</span><span style="color:#89DDFF;">::</span><span style="color:#F07178;">set</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">std</span><span style="color:#89DDFF;">::</span><span style="color:#F07178;">string</span><span style="color:#89DDFF;">&gt;</span><span style="color:#F07178;"> h</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#FFCB6B;">std</span><span style="color:#89DDFF;">::</span><span style="color:#F07178;">multiset</span><span style="color:#89DDFF;">&lt;</span><span style="color:#C792EA;">int</span><span style="color:#89DDFF;">&gt;</span><span style="color:#F07178;"> i</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#FFCB6B;">std</span><span style="color:#89DDFF;">::</span><span style="color:#F07178;">unordered_map</span><span style="color:#89DDFF;">&lt;</span><span style="color:#C792EA;">int</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> person</span><span style="color:#89DDFF;">&gt;</span><span style="color:#F07178;"> j</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#FFCB6B;">std</span><span style="color:#89DDFF;">::</span><span style="color:#F07178;">unordered_multimap</span><span style="color:#89DDFF;">&lt;</span><span style="color:#C792EA;">int</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">int</span><span style="color:#89DDFF;">&gt;</span><span style="color:#F07178;"> k</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#FFCB6B;">std</span><span style="color:#89DDFF;">::</span><span style="color:#F07178;">array</span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">person</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">2</span><span style="color:#89DDFF;">&gt;</span><span style="color:#F07178;"> m</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  person </span><span style="color:#A6ACCD;">n</span><span style="color:#89DDFF;">[</span><span style="color:#F78C6C;">2</span><span style="color:#89DDFF;">];</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#FFCB6B;">std</span><span style="color:#89DDFF;">::</span><span style="color:#F07178;">pair</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">std</span><span style="color:#89DDFF;">::</span><span style="color:#F07178;">string</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> person</span><span style="color:#89DDFF;">&gt;</span><span style="color:#F07178;"> o</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#FFCB6B;">std</span><span style="color:#89DDFF;">::</span><span style="color:#F07178;">optional</span><span style="color:#89DDFF;">&lt;</span><span style="color:#C792EA;">int</span><span style="color:#89DDFF;">&gt;</span><span style="color:#F07178;"> p</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#FFCB6B;">std</span><span style="color:#89DDFF;">::</span><span style="color:#F07178;">unique_ptr</span><span style="color:#89DDFF;">&lt;</span><span style="color:#C792EA;">int</span><span style="color:#89DDFF;">&gt;</span><span style="color:#F07178;"> q</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">struct</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">nested_object</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">int</span><span style="color:#F07178;"> id</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#FFCB6B;">std</span><span style="color:#89DDFF;">::</span><span style="color:#F07178;">string name</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  person p</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  complicated_object o</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">nested_object nested</span><span style="color:#89DDFF;">{</span><span style="color:#F07178;">.id </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">2</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> .name </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">tom</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> .p </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F78C6C;">20</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">tom</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">},</span><span style="color:#F07178;"> .o </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{}};</span></span>
<span class="line"><span style="color:#C792EA;">auto</span><span style="color:#A6ACCD;"> buffer </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">serialize</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">nested</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#C792EA;">auto</span><span style="color:#A6ACCD;"> nested2 </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">deserialize</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">buffer</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">data</span><span style="color:#89DDFF;">(),</span><span style="color:#A6ACCD;"> buffer</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">size</span><span style="color:#89DDFF;">());</span></span>
<span class="line"><span style="color:#82AAFF;">assert</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">nested2</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#82AAFF;">assert</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">nested2</span><span style="color:#89DDFF;">==</span><span style="color:#A6ACCD;">nested1</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span></code></pre></div><h2 id="custom-support" tabindex="-1">custom support <a class="header-anchor" href="#custom-support" aria-hidden="true">#</a></h2><h3 id="custom-type" tabindex="-1">custom type <a class="header-anchor" href="#custom-type" aria-hidden="true">#</a></h3><p>In addition, struct_pack supports serialization and deserialization on custom containers, as below:</p><div class="language-cpp"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki"><code><span class="line"><span style="color:#676E95;">// We should not inherit from stl container, this case just for testing.</span></span>
<span class="line"><span style="color:#C792EA;">template</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#C792EA;">typename</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Key</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">typename</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Value</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#C792EA;">struct</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">my_map</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">public</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">std</span><span style="color:#89DDFF;">::</span><span style="color:#FFCB6B;">map</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">Key</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">Value</span><span style="color:#89DDFF;">&gt;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">my_map</span><span style="color:#89DDFF;">&lt;</span><span style="color:#C792EA;">int</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">std</span><span style="color:#89DDFF;">::</span><span style="color:#A6ACCD;">string</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> map1</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">map1</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">emplace</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">tom</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">map1</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">emplace</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">2</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">jerry</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FFCB6B;">absl</span><span style="color:#89DDFF;">::</span><span style="color:#A6ACCD;">flat_hash_map</span><span style="color:#89DDFF;">&lt;</span><span style="color:#C792EA;">int</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">std</span><span style="color:#89DDFF;">::</span><span style="color:#A6ACCD;">string</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> map2 </span><span style="color:#89DDFF;">=</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">{{</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">huey</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">},</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F78C6C;">2</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">dewey</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">},</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F78C6C;">3</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">louie</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">},};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">auto</span><span style="color:#A6ACCD;"> buffer1 </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">serialize</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">map1</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#C792EA;">auto</span><span style="color:#A6ACCD;"> buffer2 </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">serialize</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">map2</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span></code></pre></div><p>For more detail, See <a href="https://alibaba.github.io/yalantinglibs/guide/struct-pack-type-system.html" target="_blank" rel="noreferrer">struct_pack type system</a></p><h3 id="custom-output-stream" tabindex="-1">custom output stream <a class="header-anchor" href="#custom-output-stream" aria-hidden="true">#</a></h3><p>Except std::ostream/std::sstream struct_pack also support serialize to custom output stream.</p><p>The custom stream should satisfy those conditions:</p><div class="language-cpp"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki"><code><span class="line"><span style="color:#C792EA;">template</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#C792EA;">typename</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">T</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#F78C6C;">concept</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">writer_t</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">requires</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">T t</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">t</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">write</span><span style="color:#89DDFF;">((</span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">char</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">*)nullptr,</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">std</span><span style="color:#89DDFF;">::</span><span style="color:#C792EA;">size_t</span><span style="color:#F07178;">{}</span><span style="color:#89DDFF;">);</span><span style="color:#676E95;"> // Output a piece of data. The return value can be implicit conversion to bool. Return false in any error. </span></span>
<span class="line"><span style="color:#89DDFF;">};</span></span>
<span class="line"></span></code></pre></div><p>For example:</p><div class="language-cpp"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki"><code><span class="line"><span style="color:#676E95;">// A simple output stream for fwrite.</span></span>
<span class="line"><span style="color:#C792EA;">struct</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">fwrite_stream</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  FILE</span><span style="color:#89DDFF;">*</span><span style="color:#F07178;"> file</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">bool</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">write</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">char*</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">data</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">std</span><span style="color:#89DDFF;">::</span><span style="color:#C792EA;">size_t</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">sz</span><span style="color:#89DDFF;">)</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">return</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">fwrite</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">data</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> sz</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> file</span><span style="color:#89DDFF;">)</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">==</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#82AAFF;">fwrite_stream</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">char*</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">file_name</span><span style="color:#89DDFF;">)</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">file</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">fopen</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">file_name</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">wb</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">))</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{}</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#82AAFF;">~fwrite_stream</span><span style="color:#89DDFF;">()</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">fclose</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">file</span><span style="color:#89DDFF;">);</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">};</span></span>
<span class="line"><span style="color:#676E95;">// ...</span></span>
<span class="line"><span style="color:#FFCB6B;">fwrite_stream</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">writer</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">struct_pack_demo.data</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#FFCB6B;">struct_pack</span><span style="color:#89DDFF;">::</span><span style="color:#82AAFF;">serialize_to</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">writer</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> person</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span></code></pre></div><h3 id="custom-input-stream" tabindex="-1">custom input stream <a class="header-anchor" href="#custom-input-stream" aria-hidden="true">#</a></h3><p>Except std::istream/std::sstream struct_pack also support serialize to custom input stream.</p><p>The custom stream should satisfy those conditions:</p><div class="language-cpp"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki"><code><span class="line"><span style="color:#C792EA;">template</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#C792EA;">typename</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">T</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#F78C6C;">concept</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">reader_t</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">requires</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">T t</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">t</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">read</span><span style="color:#89DDFF;">((</span><span style="color:#C792EA;">char</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">*)nullptr,</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">std</span><span style="color:#89DDFF;">::</span><span style="color:#C792EA;">size_t</span><span style="color:#F07178;">{}</span><span style="color:#89DDFF;">);</span><span style="color:#676E95;"> // Input a piece of data. The return value can be implicit conversion to bool. Return false in any error. </span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">t</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">ignore</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">std</span><span style="color:#89DDFF;">::</span><span style="color:#C792EA;">size_t</span><span style="color:#F07178;">{}</span><span style="color:#89DDFF;">);</span><span style="color:#676E95;"> // Skip a piece of data. The return value can be implicit conversion to bool. Return false in any error. </span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">t</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">tellg</span><span style="color:#89DDFF;">();</span><span style="color:#676E95;"> // Return an unsigned integer as the absolute position of stream.</span></span>
<span class="line"><span style="color:#89DDFF;">};</span></span>
<span class="line"></span></code></pre></div><p>In addition, if the stream support <code>read_view</code>, then we enable the support of zero-copy for string_view.</p><div class="language-cpp"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki"><code><span class="line"><span style="color:#C792EA;">template</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#C792EA;">typename</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">T</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#F78C6C;">concept</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">view_reader_t</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">reader_t</span><span style="color:#89DDFF;">&lt;</span><span style="color:#A6ACCD;">T</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&amp;&amp;</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">requires</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">T t</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">t</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">read_view</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">std</span><span style="color:#89DDFF;">::</span><span style="color:#C792EA;">size_t</span><span style="color:#F07178;">{}</span><span style="color:#89DDFF;">)</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">-&gt;</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">std</span><span style="color:#89DDFF;">::</span><span style="color:#F07178;">convertible_to</span><span style="color:#89DDFF;">&lt;</span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">char</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">*&gt;;</span></span>
<span class="line"><span style="color:#676E95;">  // Read a view from stream. The return value is the begin pointer to view. Return nullptr in any error.</span></span>
<span class="line"><span style="color:#89DDFF;">};</span></span>
<span class="line"></span></code></pre></div><h2 id="varint-support" tabindex="-1">varint support <a class="header-anchor" href="#varint-support" aria-hidden="true">#</a></h2><p>struct_pack also supports varint code for integer.</p><div class="language-cpp"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki"><code><span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#FFCB6B;">std</span><span style="color:#89DDFF;">::</span><span style="color:#F07178;">vector</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">struct_pack</span><span style="color:#89DDFF;">::</span><span style="color:#FFCB6B;">var_int32_t</span><span style="color:#89DDFF;">&gt;</span><span style="color:#F07178;"> vec</span><span style="color:#89DDFF;">={-</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">,</span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">,</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">,</span><span style="color:#F78C6C;">2</span><span style="color:#89DDFF;">,</span><span style="color:#F78C6C;">3</span><span style="color:#89DDFF;">,</span><span style="color:#F78C6C;">4</span><span style="color:#89DDFF;">,</span><span style="color:#F78C6C;">5</span><span style="color:#89DDFF;">,</span><span style="color:#F78C6C;">6</span><span style="color:#89DDFF;">,</span><span style="color:#F78C6C;">7</span><span style="color:#89DDFF;">};</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">auto</span><span style="color:#F07178;"> buffer </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">std</span><span style="color:#89DDFF;">::</span><span style="color:#82AAFF;">serialize</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">vec</span><span style="color:#89DDFF;">);</span><span style="color:#676E95;"> //zigzag+varint code</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#FFCB6B;">std</span><span style="color:#89DDFF;">::</span><span style="color:#F07178;">vector</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">struct_pack</span><span style="color:#89DDFF;">::</span><span style="color:#C792EA;">uint64_t</span><span style="color:#89DDFF;">&gt;</span><span style="color:#F07178;"> vec</span><span style="color:#89DDFF;">={</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">,</span><span style="color:#F78C6C;">2</span><span style="color:#89DDFF;">,</span><span style="color:#F78C6C;">3</span><span style="color:#89DDFF;">,</span><span style="color:#F78C6C;">4</span><span style="color:#89DDFF;">,</span><span style="color:#F78C6C;">5</span><span style="color:#89DDFF;">,</span><span style="color:#F78C6C;">6</span><span style="color:#89DDFF;">,</span><span style="color:#F78C6C;">7</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;">UINT64_MAX</span><span style="color:#89DDFF;">};</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">auto</span><span style="color:#F07178;"> buffer </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">std</span><span style="color:#89DDFF;">::</span><span style="color:#82AAFF;">serialize</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">vec</span><span style="color:#89DDFF;">);</span><span style="color:#676E95;"> //varint code</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"></span></code></pre></div><h2 id="benchmark" tabindex="-1">benchmark <a class="header-anchor" href="#benchmark" aria-hidden="true">#</a></h2><h3 id="test-case" tabindex="-1">Test case <a class="header-anchor" href="#test-case" aria-hidden="true">#</a></h3><p>The object to be serialized is pre-initialized and the memory to store the serialization result is pre-allocated. For each test case, we run one million serializations/deserialization and take the average.</p><h3 id="test-objects" tabindex="-1">Test objects <a class="header-anchor" href="#test-objects" aria-hidden="true">#</a></h3><ol><li>A simple object <code>person</code> with 4 scaler types</li></ol><div class="language-cpp"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki"><code><span class="line"><span style="color:#C792EA;">struct</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">person</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">int64_t</span><span style="color:#F07178;"> id</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#FFCB6B;">std</span><span style="color:#89DDFF;">::</span><span style="color:#F07178;">string name</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">int</span><span style="color:#F07178;"> age</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">double</span><span style="color:#F07178;"> salary</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">};</span></span>
<span class="line"></span></code></pre></div><ol start="2"><li>A complicated object <code>monster</code> with nested types</li></ol><div class="language-cpp"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki"><code><span class="line"><span style="color:#C792EA;">enum</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">Color</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">uint8_t</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">Red</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">Green</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">Blue</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">struct</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">Vec3</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">float</span><span style="color:#F07178;"> x</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">float</span><span style="color:#F07178;"> y</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">float</span><span style="color:#F07178;"> z</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">struct</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">Weapon</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#FFCB6B;">std</span><span style="color:#89DDFF;">::</span><span style="color:#F07178;">string name</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">int16_t</span><span style="color:#F07178;"> damage</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">struct</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">Monster</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  Vec3 pos</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">int16_t</span><span style="color:#F07178;"> mana</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">int16_t</span><span style="color:#F07178;"> hp</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#FFCB6B;">std</span><span style="color:#89DDFF;">::</span><span style="color:#F07178;">string name</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#FFCB6B;">std</span><span style="color:#89DDFF;">::</span><span style="color:#F07178;">vector</span><span style="color:#89DDFF;">&lt;</span><span style="color:#C792EA;">uint8_t</span><span style="color:#89DDFF;">&gt;</span><span style="color:#F07178;"> inventory</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  Color color</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#FFCB6B;">std</span><span style="color:#89DDFF;">::</span><span style="color:#F07178;">vector</span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">Weapon</span><span style="color:#89DDFF;">&gt;</span><span style="color:#F07178;"> weapons</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  Weapon equipped</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#FFCB6B;">std</span><span style="color:#89DDFF;">::</span><span style="color:#F07178;">vector</span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">Vec3</span><span style="color:#89DDFF;">&gt;</span><span style="color:#F07178;"> path</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">};</span></span>
<span class="line"></span></code></pre></div><ol start="3"><li>A <code>rect</code> object with for <code>int32_t</code></li></ol><div class="language-cpp"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki"><code><span class="line"><span style="color:#C792EA;">struct</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">rect</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">int32_t</span><span style="color:#F07178;"> x</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">int32_t</span><span style="color:#F07178;"> y</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">int32_t</span><span style="color:#F07178;"> width</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">int32_t</span><span style="color:#F07178;"> height</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">};</span></span>
<span class="line"></span></code></pre></div><h3 id="test-environment" tabindex="-1">Test Environment <a class="header-anchor" href="#test-environment" aria-hidden="true">#</a></h3><p>Compiler: Alibaba Clang 13</p><p>Processor: (Intel(R) Xeon(R) Platinum 8163 CPU @ 2.50GHz)</p><h3 id="test-results" tabindex="-1">Test results <a class="header-anchor" href="#test-results" aria-hidden="true">#</a></h3><p><img src="`+p+`" alt=""></p><h2 id="forward-backward-compatibility" tabindex="-1">Forward/backward compatibility <a class="header-anchor" href="#forward-backward-compatibility" aria-hidden="true">#</a></h2><p>If current message type no longer meets all you needs - say, you&#39;d like the object to have an extra field, the compatibility should not be broken so that the old object could be correctly parsed with the new type definition. In struct_pack, any new fields you added must be of type <code>struct_pack::compatible&lt;T&gt;</code> and be appended <strong>at the end of the object</strong>. <br>Let&#39;s take struct <code>person</code> as an example:</p><div class="language-cpp"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki"><code><span class="line"><span style="color:#C792EA;">struct</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">person</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">int</span><span style="color:#F07178;"> age</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#FFCB6B;">std</span><span style="color:#89DDFF;">::</span><span style="color:#F07178;">string name</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">struct</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">person1</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">int</span><span style="color:#F07178;"> age</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#FFCB6B;">std</span><span style="color:#89DDFF;">::</span><span style="color:#F07178;">string name</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#FFCB6B;">struct_pack</span><span style="color:#89DDFF;">::</span><span style="color:#F07178;">compatible</span><span style="color:#89DDFF;">&lt;</span><span style="color:#C792EA;">int32_t</span><span style="color:#89DDFF;">&gt;</span><span style="color:#F07178;"> id</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#FFCB6B;">struct_pack</span><span style="color:#89DDFF;">::</span><span style="color:#F07178;">compatible</span><span style="color:#89DDFF;">&lt;</span><span style="color:#C792EA;">bool</span><span style="color:#89DDFF;">&gt;</span><span style="color:#F07178;"> maybe</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">};</span></span>
<span class="line"></span></code></pre></div><p>struct_pack ensures that the two classes can be safely converted to each other by serialization and deserialization, thus achieving forward/backward compatibility.</p><h2 id="why-is-struct-pack-faster" tabindex="-1">Why is struct_pack faster? <a class="header-anchor" href="#why-is-struct-pack-faster" aria-hidden="true">#</a></h2><ol><li>Streamlined type information and efficient type-checking. MD5 computation is done at compile time so at runtime we only needs to compare 32bit hash values to check sameness.</li><li>struct_pack is a template library that encourages the compiler to do a better job at inlining.</li><li>Zero-cost abstraction, no runtime cost for features that are not used.</li><li>struct_pack&#39;s memory layout is much closer to the native C++ object, reducing the workload of (de)serializations.</li><li>Compile-time type calculation allows struct_pack to generate different codes according to different types. So we can do optimization upon types. For example, we could use <code>memcpy</code> on contiguous containers and zero-copy optimization could be used on <code>string_view</code></li></ol><h2 id="appendix" tabindex="-1">Appendix <a class="header-anchor" href="#appendix" aria-hidden="true">#</a></h2><h3 id="struct-pack-type-system" tabindex="-1">struct_pack type system <a class="header-anchor" href="#struct-pack-type-system" aria-hidden="true">#</a></h3><p><a href="https://alibaba.github.io/yalantinglibs/guide/struct-pack-type-system.html" target="_blank" rel="noreferrer">struct_pack type system</a></p><h3 id="struct-pack-layout" tabindex="-1">struct_pack layout <a class="header-anchor" href="#struct-pack-layout" aria-hidden="true">#</a></h3><p><a href="https://alibaba.github.io/yalantinglibs/guide/struct-pack-layout.html" target="_blank" rel="noreferrer">struct_pack layout</a></p><h3 id="test-code" tabindex="-1">Test code <a class="header-anchor" href="#test-code" aria-hidden="true">#</a></h3><p>see <a href="https://github.com/alibaba/yalantinglibs/tree/main/src/struct_pack/benchmark" target="_blank" rel="noreferrer">benchmark.cpp</a></p>`,84),t=[e];function r(c,F,y,i,D,C){return n(),a("div",null,t)}const u=s(o,[["render",r]]);export{A as __pageData,u as default};
