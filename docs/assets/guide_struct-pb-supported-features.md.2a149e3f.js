import{_ as t,c as d,o as e,a as r}from"./app.3b6e8018.js";const b=JSON.parse('{"title":"Supported Features","description":"","frontmatter":{},"headers":[{"level":2,"title":"proto3","slug":"proto3","link":"#proto3","children":[{"level":3,"title":"Scalar Value Types","slug":"scalar-value-types","link":"#scalar-value-types","children":[]},{"level":3,"title":"Advance","slug":"advance","link":"#advance","children":[]}]},{"level":2,"title":"proto2","slug":"proto2","link":"#proto2","children":[{"level":3,"title":"Scalar Value Types","slug":"scalar-value-types-1","link":"#scalar-value-types-1","children":[]},{"level":3,"title":"Advance","slug":"advance-1","link":"#advance-1","children":[]}]}],"relativePath":"guide/struct-pb-supported-features.md","lastUpdated":null}'),a={name:"guide/struct-pb-supported-features.md"},s=r('<h1 id="supported-features" tabindex="-1">Supported Features <a class="header-anchor" href="#supported-features" aria-hidden="true">#</a></h1><h2 id="proto3" tabindex="-1">proto3 <a class="header-anchor" href="#proto3" aria-hidden="true">#</a></h2><h3 id="scalar-value-types" tabindex="-1">Scalar Value Types <a class="header-anchor" href="#scalar-value-types" aria-hidden="true">#</a></h3><p>The mapping type is same as the official implementation.</p><table><thead><tr><th>.proto Type</th><th>Support</th></tr></thead><tbody><tr><td>double</td><td>\u2705</td></tr><tr><td>float</td><td>\u2705</td></tr><tr><td>int32</td><td>\u2705</td></tr><tr><td>int64</td><td>\u2705</td></tr><tr><td>uint32</td><td>\u2705</td></tr><tr><td>uint64</td><td>\u2705</td></tr><tr><td>sint32</td><td>\u2705</td></tr><tr><td>sint64</td><td>\u2705</td></tr><tr><td>fixed32</td><td>\u2705</td></tr><tr><td>fixed64</td><td>\u2705</td></tr><tr><td>sfixed32</td><td>\u2705</td></tr><tr><td>sfixed64</td><td>\u2705</td></tr><tr><td>bool</td><td>\u2705</td></tr><tr><td>string</td><td>\u2705</td></tr><tr><td>bytes</td><td>\u2705</td></tr></tbody></table><h3 id="advance" tabindex="-1">Advance <a class="header-anchor" href="#advance" aria-hidden="true">#</a></h3><table><thead><tr><th>.proto Type</th><th>Support</th></tr></thead><tbody><tr><td>Groups</td><td>\u274C</td></tr><tr><td>Oneof</td><td>\u2705</td></tr><tr><td>Maps</td><td>\u2705</td></tr><tr><td>JSON Mapping</td><td>\u274C</td></tr><tr><td>Reflection</td><td>\u274C</td></tr></tbody></table><h2 id="proto2" tabindex="-1">proto2 <a class="header-anchor" href="#proto2" aria-hidden="true">#</a></h2><h3 id="scalar-value-types-1" tabindex="-1">Scalar Value Types <a class="header-anchor" href="#scalar-value-types-1" aria-hidden="true">#</a></h3><p>The mapping type is same as the official implementation.</p><table><thead><tr><th>.proto Type</th><th>Support</th></tr></thead><tbody><tr><td>double</td><td>\u2705</td></tr><tr><td>float</td><td>\u2705</td></tr><tr><td>int32</td><td>\u2705</td></tr><tr><td>int64</td><td>\u2705</td></tr><tr><td>uint32</td><td>\u2705</td></tr><tr><td>uint64</td><td>\u2705</td></tr><tr><td>sint32</td><td>\u2705</td></tr><tr><td>sint64</td><td>\u2705</td></tr><tr><td>fixed32</td><td>\u2705</td></tr><tr><td>fixed64</td><td>\u2705</td></tr><tr><td>sfixed32</td><td>\u2705</td></tr><tr><td>sfixed64</td><td>\u2705</td></tr><tr><td>bool</td><td>\u2705</td></tr><tr><td>string</td><td>\u2705</td></tr><tr><td>bytes</td><td>\u2705</td></tr></tbody></table><h3 id="advance-1" tabindex="-1">Advance <a class="header-anchor" href="#advance-1" aria-hidden="true">#</a></h3><table><thead><tr><th>.proto Type</th><th>Support</th></tr></thead><tbody><tr><td>Groups</td><td>\u274C</td></tr><tr><td>Extensions</td><td>\u274C</td></tr><tr><td>Oneof</td><td>\u2705</td></tr><tr><td>Maps</td><td>\u2705</td></tr><tr><td>JSON Mapping</td><td>\u274C</td></tr><tr><td>Reflection</td><td>\u274C</td></tr></tbody></table>',13),i=[s];function o(l,n,p,h,c,u){return e(),d("div",null,i)}const v=t(a,[["render",o]]);export{b as __pageData,v as default};
