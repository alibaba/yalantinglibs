import{_ as s,c as n,o as a,a as l}from"./app.3b6e8018.js";const o="/yalantinglibs/assets/max_qps.2ac9fa43.png",p="/yalantinglibs/assets/pingpong_qps.ce276867.png",e="/yalantinglibs/assets/pingpong_time.3684bb20.png",t="/yalantinglibs/assets/long_tail_qps.1ada3499.png",c="/yalantinglibs/assets/long_tail_time.24fbb959.png",m=JSON.parse('{"title":"Introduction","description":"","frontmatter":{},"headers":[{"level":2,"title":"server","slug":"server","link":"#server","children":[]},{"level":2,"title":"RPC with any parameters","slug":"rpc-with-any-parameters","link":"#rpc-with-any-parameters","children":[]},{"level":2,"title":"Usability","slug":"usability-1","link":"#usability-1","children":[]},{"level":2,"title":"Asynchronous Model","slug":"asynchronous-model","link":"#asynchronous-model","children":[]},{"level":2,"title":"Real-time Tasks and Non-Real-time Tasks","slug":"real-time-tasks-and-non-real-time-tasks","link":"#real-time-tasks-and-non-real-time-tasks","children":[]},{"level":2,"title":"Asynchronous mode","slug":"asynchronous-mode","link":"#asynchronous-mode","children":[]},{"level":2,"title":"System Configuration","slug":"system-configuration","link":"#system-configuration","children":[]},{"level":2,"title":"Test case","slug":"test-case","link":"#test-case","children":[{"level":3,"title":"Peak QPS test","slug":"peak-qps-test","link":"#peak-qps-test","children":[]},{"level":3,"title":"ping-pong test","slug":"ping-pong-test","link":"#ping-pong-test","children":[]},{"level":3,"title":"long-tail test","slug":"long-tail-test","link":"#long-tail-test","children":[]}]},{"level":2,"title":"Notes on benchmark test","slug":"notes-on-benchmark-test","link":"#notes-on-benchmark-test","children":[]}],"relativePath":"guide/coro-rpc-intro.md","lastUpdated":null}'),r={name:"guide/coro-rpc-intro.md"},F=l(`<h1 id="introduction" tabindex="-1">Introduction <a class="header-anchor" href="#introduction" aria-hidden="true">#</a></h1><p>coro_rpc is a high-performance Remote Procedure Call (RPC) framework in C++20, based on stackless coroutine and compile-time reflection. In an <code>echo</code> benchmark test on localhost, it reaches a peak QPS of 20 million, which exceeds other RPC libraries, such as grpc and brpc. Rather than high performance, the most key feature of coro_rpc is easy to use: as a header-only library, it does not need to be compiled or installed separately. It allows building an RPC client and server with a few lines of C++ code.</p><p>The core design goal of coro_rpc is usability. Instead of exposing too many troublesome details of the underlying RPC framework, coro_rpc provides a simplifying abstraction that allows programmers to concentrate principally on business logic and implement an RPC service without much effort. Given such simplicity, coro_rpc goes back to the essence of RPC: a remote function call similar to a normal function call except for the underlying network I/O. So coro_rpc user does not need to care about the underlying networking, data serialization, and so on but focus on up-layer implementations. And coro_rpc provides simple and straightforward APIs to users. Let&#39;s see one simple demo below</p><h1 id="usability" tabindex="-1">Usability <a class="header-anchor" href="#usability" aria-hidden="true">#</a></h1><h2 id="server" tabindex="-1">server <a class="header-anchor" href="#server" aria-hidden="true">#</a></h2><ol><li>define the RPC function</li></ol><div class="language-cpp"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki"><code><span class="line"><span style="color:#676E95;">// rpc_service.hpp</span></span>
<span class="line"><span style="color:#C792EA;">inline</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">std</span><span style="color:#89DDFF;">::</span><span style="color:#FFCB6B;">string</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">echo</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">std</span><span style="color:#89DDFF;">::</span><span style="color:#FFCB6B;">string</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;">str</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">return</span><span style="color:#A6ACCD;"> str</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><ol start="2"><li>regist the RPC function and start the server</li></ol><div class="language-cpp"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki"><code><span class="line"><span style="color:#89DDFF;">#include</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">rpc_service.hpp</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#89DDFF;">#include</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#C3E88D;">coro_rpc/coro_rpc_server.hpp</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">main</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  coro_rpc_server </span><span style="color:#82AAFF;">server</span><span style="color:#89DDFF;">(</span><span style="color:#676E95;">/*thread_num =*/</span><span style="color:#F78C6C;">10</span><span style="color:#89DDFF;">,</span><span style="color:#676E95;"> /*port =*/</span><span style="color:#F78C6C;">9000</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">  server</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">register_handler</span><span style="color:#89DDFF;">&lt;</span><span style="color:#A6ACCD;">echo</span><span style="color:#89DDFF;">&gt;();</span><span style="color:#676E95;"> // register rpc function</span></span>
<span class="line"><span style="color:#A6ACCD;">  server</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">start</span><span style="color:#89DDFF;">();</span><span style="color:#676E95;"> // start the server and blocking wait</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><p>Basically one could build a RPC server in 5~6 lines by defining the rpc function and starting the server, without too much details to be worried about. Now let see how a RPC client works.</p><p>An RPC client has to connect to the server and then call the remote method.</p><div class="language-cpp"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki"><code><span class="line"><span style="color:#89DDFF;">#include</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">rpc_service.hpp</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#89DDFF;">#include</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#C3E88D;">coro_rpc/coro_rpc_client.hpp</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FFCB6B;">Lazy</span><span style="color:#89DDFF;">&lt;</span><span style="color:#C792EA;">void</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">test_client</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  coro_rpc_client client</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">co_await</span><span style="color:#A6ACCD;"> client</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">connect</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">localhost</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#676E95;"> /*port =*/</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">9000</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#C792EA;">auto</span><span style="color:#A6ACCD;"> r </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">co_await</span><span style="color:#A6ACCD;"> client</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">call</span><span style="color:#89DDFF;">&lt;</span><span style="color:#A6ACCD;">echo</span><span style="color:#89DDFF;">&gt;(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">hello coro_rpc</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">);</span><span style="color:#676E95;"> // call the method with parameters</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#FFCB6B;">std</span><span style="color:#89DDFF;">::</span><span style="color:#A6ACCD;">cout </span><span style="color:#89DDFF;">&lt;&lt;</span><span style="color:#A6ACCD;"> r</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">result</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">value</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;&lt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">\\n</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span><span style="color:#676E95;"> //will print &quot;hello coro_rpc&quot;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">main</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#82AAFF;">syncAwait</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">test_client</span><span style="color:#89DDFF;">());</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><p>As demonstrated above, it is also very convenient to build a client. There&#39;s not much difference between an RPC function call with a local function one: simply provides the function name and parameters.</p><p>The server/client implementation shows the usability and core features of coro_rpc. Also, it shows us the core concept of RPC: that users can invoke remote methods in a way with local functions, and users will focus their efforts on RPC functions.</p><p>Another usability of coro_rpc is that: there are barely any constraints on the RPC function itself. One could define an RPC function with any number of parameters of any type. The serialization/deserialization procedures are transparent to users and the RPC framework will take care of them automatically.</p><h2 id="rpc-with-any-parameters" tabindex="-1">RPC with any parameters <a class="header-anchor" href="#rpc-with-any-parameters" aria-hidden="true">#</a></h2><div class="language-cpp"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki"><code><span class="line"><span style="color:#676E95;">// rpc_service.h</span></span>
<span class="line"><span style="color:#676E95;">// client needs to include this header and the implementation details are hidden </span></span>
<span class="line"><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">hello</span><span style="color:#89DDFF;">(){};</span></span>
<span class="line"><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">get_value</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;">a</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;">b</span><span style="color:#89DDFF;">){</span><span style="color:#89DDFF;">return</span><span style="color:#A6ACCD;"> a </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> b</span><span style="color:#89DDFF;">;}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">struct</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">person</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">int</span><span style="color:#F07178;"> id</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#FFCB6B;">std</span><span style="color:#89DDFF;">::</span><span style="color:#F07178;">string name</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">int</span><span style="color:#F07178;"> age</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">};</span></span>
<span class="line"><span style="color:#FFCB6B;">person</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">get_person</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">person</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;">p</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;">id</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">struct</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">dummy</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#FFCB6B;">std</span><span style="color:#89DDFF;">::</span><span style="color:#FFCB6B;">string</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">echo</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">std</span><span style="color:#89DDFF;">::</span><span style="color:#FFCB6B;">string</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">str</span><span style="color:#89DDFF;">)</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">return</span><span style="color:#F07178;"> str</span><span style="color:#89DDFF;">;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;">// rpc_service.cpp</span></span>
<span class="line"><span style="color:#89DDFF;">#include</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">rpc_service.h</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">get_value</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;">a</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;">b</span><span style="color:#89DDFF;">){</span><span style="color:#89DDFF;">return</span><span style="color:#A6ACCD;"> a </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> b</span><span style="color:#89DDFF;">;}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FFCB6B;">person</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">get_person</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">person</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;">p</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;">id</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  p</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">id </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> id</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">return</span><span style="color:#A6ACCD;"> p</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><p>And in server, we define the following:</p><div class="language-cpp"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki"><code><span class="line"><span style="color:#89DDFF;">#include</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">rpc_service.h</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#89DDFF;">#include</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#C3E88D;">coro_rpc/coro_rpc_server.hpp</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">main</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  coro_rpc_server </span><span style="color:#82AAFF;">server</span><span style="color:#89DDFF;">(</span><span style="color:#676E95;">/*thread_num =*/</span><span style="color:#F78C6C;">10</span><span style="color:#89DDFF;">,</span><span style="color:#676E95;"> /*port =*/</span><span style="color:#F78C6C;">9000</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">  server</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">register_handler</span><span style="color:#89DDFF;">&lt;</span><span style="color:#A6ACCD;">hello</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> get_value</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> get_person</span><span style="color:#89DDFF;">&gt;();</span><span style="color:#676E95;">//register the RPC functions of any signature </span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">  dummy d</span><span style="color:#89DDFF;">{};</span></span>
<span class="line"><span style="color:#A6ACCD;">  server</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">register_handler</span><span style="color:#89DDFF;">&lt;&amp;</span><span style="color:#FFCB6B;">dummy</span><span style="color:#89DDFF;">::</span><span style="color:#A6ACCD;">echo</span><span style="color:#89DDFF;">&gt;(&amp;</span><span style="color:#A6ACCD;">d</span><span style="color:#89DDFF;">);</span><span style="color:#676E95;"> //register the member functions</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">  server</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">start</span><span style="color:#89DDFF;">();</span><span style="color:#676E95;"> // start the server</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><p>In client, we have the following:</p><div class="language-cpp"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki"><code><span class="line"><span style="color:#89DDFF;"># include</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">rpc_service.h</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#89DDFF;"># include</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#C3E88D;">coro_rpc/coro_rpc_client.hpp</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FFCB6B;">Lazy</span><span style="color:#89DDFF;">&lt;</span><span style="color:#C792EA;">void</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">test_client</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  coro_rpc_client client</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">co_await</span><span style="color:#A6ACCD;"> client</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">connect</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">localhost</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#676E95;"> /*port =*/</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">9000</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;">  //RPC invokes</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">co_await</span><span style="color:#A6ACCD;"> client</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">call</span><span style="color:#89DDFF;">&lt;</span><span style="color:#A6ACCD;">hello</span><span style="color:#89DDFF;">&gt;();</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">co_await</span><span style="color:#A6ACCD;"> client</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">call</span><span style="color:#89DDFF;">&lt;</span><span style="color:#A6ACCD;">get_value</span><span style="color:#89DDFF;">&gt;(</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">2</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">  person p</span><span style="color:#89DDFF;">{};</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">co_await</span><span style="color:#A6ACCD;"> client</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">call</span><span style="color:#89DDFF;">&lt;</span><span style="color:#A6ACCD;">get_person</span><span style="color:#89DDFF;">&gt;(</span><span style="color:#A6ACCD;">p</span><span style="color:#89DDFF;">,</span><span style="color:#676E95;"> /*id =*/</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#C792EA;">auto</span><span style="color:#A6ACCD;"> r </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">co_await</span><span style="color:#A6ACCD;"> client</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">call</span><span style="color:#89DDFF;">&lt;&amp;</span><span style="color:#FFCB6B;">dummy</span><span style="color:#89DDFF;">::</span><span style="color:#A6ACCD;">echo</span><span style="color:#89DDFF;">&gt;(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">hello coro_rpc</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#FFCB6B;">std</span><span style="color:#89DDFF;">::</span><span style="color:#A6ACCD;">cout </span><span style="color:#89DDFF;">&lt;&lt;</span><span style="color:#A6ACCD;"> r</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">result</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">value</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;&lt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">\\n</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span><span style="color:#676E95;"> //will print &quot;hello coro_rpc&quot;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">main</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#82AAFF;">syncAwait</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">test_client</span><span style="color:#89DDFF;">());</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><p>The input parameter and return type of <code>get_person</code> is a <code>struct</code>. The serialization/deserialization are automatically done by library <a href="https://alibaba.github.io/yalantinglibs/guide/struct-pack-intro.html" target="_blank" rel="noreferrer">struct_pack</a> with compile-time reflection. Users are not required to take efforts on such procedures.</p><h1 id="compare-with-grpc-brpc" tabindex="-1">Compare with grpc/brpc <a class="header-anchor" href="#compare-with-grpc-brpc" aria-hidden="true">#</a></h1><h2 id="usability-1" tabindex="-1">Usability <a class="header-anchor" href="#usability-1" aria-hidden="true">#</a></h2><table><thead><tr><th>RPC</th><th>Define DSL</th><th>support coroutine</th><th>code lines of hello world</th><th>external dependency</th><th>header-only</th></tr></thead><tbody><tr><td>grpc</td><td>Yes</td><td>No</td><td>70+ <a href="https://github.com/grpc/grpc/tree/master/examples/cpp/helloworld" target="_blank" rel="noreferrer">helloworld</a></td><td>16</td><td>No</td></tr><tr><td>brpc</td><td>Yes</td><td>No</td><td>40+ <a href="https://github.com/apache/incubator-brpc/tree/master/example/asynchronous_echo_c%2B%2B" target="_blank" rel="noreferrer">helloworld</a></td><td>6</td><td>No</td></tr><tr><td>coro_rpc</td><td>No</td><td>Yes</td><td>9</td><td>3</td><td>Yes</td></tr></tbody></table><h2 id="asynchronous-model" tabindex="-1">Asynchronous Model <a class="header-anchor" href="#asynchronous-model" aria-hidden="true">#</a></h2><p>Asynchronous callback VS. coroutine</p><ul><li>grpc asynchronous client</li></ul><div class="language-cpp"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki"><code><span class="line"><span style="color:#676E95;">//&lt;https://github.com/grpc/grpc/blob/master/examples/cpp/helloworld/greeter_callback_client.cc&gt;</span></span>
<span class="line"><span style="color:#FFCB6B;">std</span><span style="color:#89DDFF;">::</span><span style="color:#FFCB6B;">string</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">SayHello</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">std</span><span style="color:#89DDFF;">::</span><span style="color:#FFCB6B;">string</span><span style="color:#C792EA;">&amp;</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;">user</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#676E95;">    // Data we are sending to the server.</span></span>
<span class="line"><span style="color:#A6ACCD;">    HelloRequest request</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">    request</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">set_name</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">user</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;">    // Container for the data we expect from the server.</span></span>
<span class="line"><span style="color:#A6ACCD;">    HelloReply reply</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;">    // Context for the client. It could be used to convey extra information to</span></span>
<span class="line"><span style="color:#676E95;">    // the server and/or tweak certain RPC behaviors.</span></span>
<span class="line"><span style="color:#A6ACCD;">    ClientContext context</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;">    // The actual RPC.</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#FFCB6B;">std</span><span style="color:#89DDFF;">::</span><span style="color:#A6ACCD;">mutex mu</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#FFCB6B;">std</span><span style="color:#89DDFF;">::</span><span style="color:#A6ACCD;">condition_variable cv</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">bool</span><span style="color:#A6ACCD;"> done </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">false;</span></span>
<span class="line"><span style="color:#A6ACCD;">    Status status</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">    stub_</span><span style="color:#89DDFF;">-&gt;</span><span style="color:#82AAFF;">async</span><span style="color:#89DDFF;">()-&gt;</span><span style="color:#82AAFF;">SayHello</span><span style="color:#89DDFF;">(&amp;</span><span style="color:#A6ACCD;">context</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&amp;</span><span style="color:#A6ACCD;">request</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&amp;</span><span style="color:#A6ACCD;">reply</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">                             </span><span style="color:#89DDFF;">[&amp;</span><span style="color:#A6ACCD;">mu</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&amp;</span><span style="color:#A6ACCD;">cv</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&amp;</span><span style="color:#A6ACCD;">done</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&amp;</span><span style="color:#A6ACCD;">status</span><span style="color:#89DDFF;">](</span><span style="color:#FFCB6B;">Status</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;">s</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">                               status </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">std</span><span style="color:#89DDFF;">::</span><span style="color:#82AAFF;">move</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">s</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">                               </span><span style="color:#FFCB6B;">std</span><span style="color:#89DDFF;">::</span><span style="color:#FFCB6B;">lock_guard</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">std</span><span style="color:#89DDFF;">::</span><span style="color:#FFCB6B;">mutex</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">lock</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">mu</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">                               done </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">true;</span></span>
<span class="line"><span style="color:#A6ACCD;">                               cv</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">notify_one</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#A6ACCD;">                             </span><span style="color:#89DDFF;">});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#FFCB6B;">std</span><span style="color:#89DDFF;">::</span><span style="color:#A6ACCD;">unique_lock</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">std</span><span style="color:#89DDFF;">::</span><span style="color:#A6ACCD;">mutex</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">lock</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">mu</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">while</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(!</span><span style="color:#A6ACCD;">done</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#A6ACCD;">cv</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">wait</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">lock</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;">    // Act upon its status.</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">if</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">status</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">ok</span><span style="color:#89DDFF;">())</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#89DDFF;">return</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">reply</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">message</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">else</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#FFCB6B;">std</span><span style="color:#89DDFF;">::</span><span style="color:#F07178;">cout </span><span style="color:#89DDFF;">&lt;&lt;</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">status</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">error_code</span><span style="color:#89DDFF;">()</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&lt;&lt;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">: </span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&lt;&lt;</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">status</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">error_message</span><span style="color:#89DDFF;">()</span></span>
<span class="line"><span style="color:#F07178;">                </span><span style="color:#89DDFF;">&lt;&lt;</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">std</span><span style="color:#89DDFF;">::</span><span style="color:#F07178;">endl</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#89DDFF;">return</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">RPC failed</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><ul><li>brpc asynchronous client</li></ul><div class="language-cpp"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki"><code><span class="line"><span style="color:#676E95;">// &lt;https://github.com/apache/incubator-brpc/blob/master/example/asynchronous_echo_c%2B%2B/client.cpp&gt;</span></span>
<span class="line"><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">HandleEchoResponse</span><span style="color:#89DDFF;">(</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#FFCB6B;">brpc</span><span style="color:#89DDFF;">::</span><span style="color:#FFCB6B;">Controller</span><span style="color:#C792EA;">*</span><span style="color:#A6ACCD;">cntl</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#FFCB6B;">example</span><span style="color:#89DDFF;">::</span><span style="color:#FFCB6B;">EchoResponse</span><span style="color:#C792EA;">*</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;">response</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#676E95;">    // std::unique_ptr makes sure cntl/response will be deleted before returning.</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#FFCB6B;">std</span><span style="color:#89DDFF;">::</span><span style="color:#A6ACCD;">unique_ptr</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">brpc</span><span style="color:#89DDFF;">::</span><span style="color:#A6ACCD;">Controller</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">cntl_guard</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">cntl</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#FFCB6B;">std</span><span style="color:#89DDFF;">::</span><span style="color:#A6ACCD;">unique_ptr</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">example</span><span style="color:#89DDFF;">::</span><span style="color:#A6ACCD;">EchoResponse</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">response_guard</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">response</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">if</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">cntl</span><span style="color:#89DDFF;">-&gt;</span><span style="color:#82AAFF;">Failed</span><span style="color:#89DDFF;">())</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#82AAFF;">LOG</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">WARNING</span><span style="color:#89DDFF;">)</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&lt;&lt;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Fail to send EchoRequest, </span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&lt;&lt;</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">cntl</span><span style="color:#89DDFF;">-&gt;</span><span style="color:#82AAFF;">ErrorText</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;">return</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#82AAFF;">LOG</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">INFO</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;&lt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Received response from </span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;&lt;</span><span style="color:#A6ACCD;"> cntl</span><span style="color:#89DDFF;">-&gt;</span><span style="color:#82AAFF;">remote_side</span><span style="color:#89DDFF;">()</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">&lt;&lt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">: </span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;&lt;</span><span style="color:#A6ACCD;"> response</span><span style="color:#89DDFF;">-&gt;</span><span style="color:#82AAFF;">message</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;&lt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;"> (attached=</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">&lt;&lt;</span><span style="color:#A6ACCD;"> cntl</span><span style="color:#89DDFF;">-&gt;</span><span style="color:#82AAFF;">response_attachment</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;&lt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">)</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">&lt;&lt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;"> latency=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;&lt;</span><span style="color:#A6ACCD;"> cntl</span><span style="color:#89DDFF;">-&gt;</span><span style="color:#82AAFF;">latency_us</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;&lt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">us</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">main</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#FFCB6B;">example</span><span style="color:#89DDFF;">::</span><span style="color:#A6ACCD;">EchoService_Stub </span><span style="color:#82AAFF;">stub</span><span style="color:#89DDFF;">(&amp;</span><span style="color:#A6ACCD;">channel</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;">    // Send a request and wait for the response every 1 second.</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> log_id </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">while</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(!</span><span style="color:#FFCB6B;">brpc</span><span style="color:#89DDFF;">::</span><span style="color:#82AAFF;">IsAskedToQuit</span><span style="color:#89DDFF;">())</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#676E95;">        // Since we are sending asynchronous RPC (\`done&#39; is not NULL),</span></span>
<span class="line"><span style="color:#676E95;">        // these objects MUST remain valid until \`done&#39; is called.</span></span>
<span class="line"><span style="color:#676E95;">        // As a result, we allocate these objects on heap</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#FFCB6B;">example</span><span style="color:#89DDFF;">::</span><span style="color:#F07178;">EchoResponse</span><span style="color:#89DDFF;">*</span><span style="color:#F07178;"> response </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">new</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">example</span><span style="color:#89DDFF;">::</span><span style="color:#82AAFF;">EchoResponse</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#FFCB6B;">brpc</span><span style="color:#89DDFF;">::</span><span style="color:#F07178;">Controller</span><span style="color:#89DDFF;">*</span><span style="color:#F07178;"> cntl </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">new</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">brpc</span><span style="color:#89DDFF;">::</span><span style="color:#82AAFF;">Controller</span><span style="color:#89DDFF;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;">        // Notice that you don&#39;t have to new request, which can be modified</span></span>
<span class="line"><span style="color:#676E95;">        // or destroyed just after stub.Echo is called.</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#FFCB6B;">example</span><span style="color:#89DDFF;">::</span><span style="color:#F07178;">EchoRequest request</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#A6ACCD;">request</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">set_message</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">hello world</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#A6ACCD;">cntl</span><span style="color:#89DDFF;">-&gt;</span><span style="color:#82AAFF;">set_log_id</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">log_id </span><span style="color:#89DDFF;">++);</span><span style="color:#676E95;">  // set by user</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;">if</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">FLAGS_send_attachment</span><span style="color:#89DDFF;">)</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#676E95;">            // Set attachment which is wired to network directly instead of </span></span>
<span class="line"><span style="color:#676E95;">            // being serialized into protobuf messages.</span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#A6ACCD;">cntl</span><span style="color:#89DDFF;">-&gt;</span><span style="color:#82AAFF;">request_attachment</span><span style="color:#89DDFF;">().</span><span style="color:#82AAFF;">append</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">foo</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;">        // We use protobuf utility \`NewCallback&#39; to create a closure object</span></span>
<span class="line"><span style="color:#676E95;">        // that will call our callback \`HandleEchoResponse&#39;. This closure</span></span>
<span class="line"><span style="color:#676E95;">        // will automatically delete itself after being called once</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#FFCB6B;">google</span><span style="color:#89DDFF;">::</span><span style="color:#FFCB6B;">protobuf</span><span style="color:#89DDFF;">::</span><span style="color:#F07178;">Closure</span><span style="color:#89DDFF;">*</span><span style="color:#F07178;"> done </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">brpc</span><span style="color:#89DDFF;">::</span><span style="color:#82AAFF;">NewCallback</span><span style="color:#89DDFF;">(</span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#89DDFF;">&amp;</span><span style="color:#F07178;">HandleEchoResponse</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> cntl</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> response</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#A6ACCD;">stub</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">Echo</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">cntl</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&amp;</span><span style="color:#F07178;">request</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> response</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> done</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;">        // This is an asynchronous RPC, so we can only fetch the result</span></span>
<span class="line"><span style="color:#676E95;">        // inside the callback</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#82AAFF;">sleep</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><ul><li>coro_rpc client with coroutine</li></ul><div class="language-cpp"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki"><code><span class="line"><span style="color:#89DDFF;"># include</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#C3E88D;">coro_rpc/coro_rpc_client.hpp</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FFCB6B;">Lazy</span><span style="color:#89DDFF;">&lt;</span><span style="color:#C792EA;">void</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">say_hello</span><span style="color:#89DDFF;">(){</span></span>
<span class="line"><span style="color:#A6ACCD;">  coro_rpc_client client</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">co_await</span><span style="color:#A6ACCD;"> client</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">connect</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">localhost</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#676E95;"> /*port =*/</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">9000</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">while</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(true){</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">auto</span><span style="color:#F07178;"> r </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">co_await</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">client</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">call</span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">echo</span><span style="color:#89DDFF;">&gt;(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">hello coro_rpc</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">assert</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">r</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">result</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">value</span><span style="color:#89DDFF;">()</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">==</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">hello coro_rpc</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><p>One core feature of coro_rpc is stackless coroutine where users could write asynchronous code in a synchronous manner, which is more simple and easy to understand.</p><h1 id="more-features" tabindex="-1">More features <a class="header-anchor" href="#more-features" aria-hidden="true">#</a></h1><h2 id="real-time-tasks-and-non-real-time-tasks" tabindex="-1">Real-time Tasks and Non-Real-time Tasks <a class="header-anchor" href="#real-time-tasks-and-non-real-time-tasks" aria-hidden="true">#</a></h2><p>The examples shown earlier do not demonstrate how responses are sent back to the client with the results, because by default the coro_rpc framework will help the user to serialize and send the results to client automatically. And the user is completely unaware and only needs to focus on the business logic. It should be noted that, in this scenario, the response callback is executed in the I/O thread, which is suitable for real-time critical scenarios, with the disadvantage of blocking the I/O thread. What if the user does not want to execute the business logic in the io thread, but rather in a thread or thread pool and delays sending messages?</p><p>coro_rpc has taken this problem into account. coro_rpc considers that RPC tasks are divided into real-time and Non-real-time tasks. real-time tasks are executed in the I/O thread and sent to the client immediately, with better timeliness and lower latency; Non-real-time tasks can be scheduled in a separate thread, and the requests are sent to the server at some point in the future; coro_rpc supports both kinds of tasks.</p><p>Switch to time-delayed task</p><div class="language-cpp"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki"><code><span class="line"><span style="color:#89DDFF;">#include</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#C3E88D;">coro_rpc/connection.hpp</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">#include</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#C3E88D;">coro_rpc/coro_rpc_server.hpp</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;">//Real-time tasks</span></span>
<span class="line"><span style="color:#FFCB6B;">std</span><span style="color:#89DDFF;">::</span><span style="color:#FFCB6B;">string</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">echo</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">std</span><span style="color:#89DDFF;">::</span><span style="color:#FFCB6B;">string</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;">str</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">return</span><span style="color:#A6ACCD;"> str</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;">//Non-Real-time tasks, requests handled in separate thread</span></span>
<span class="line"><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">delay_echo</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">coro_connection</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">std</span><span style="color:#89DDFF;">::</span><span style="color:#FFCB6B;">string</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;">conn</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">std</span><span style="color:#89DDFF;">::</span><span style="color:#FFCB6B;">string</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;">str</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#FFCB6B;">std</span><span style="color:#89DDFF;">::</span><span style="color:#82AAFF;">thread</span><span style="color:#89DDFF;">([</span><span style="color:#A6ACCD;">conn</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;">str</span><span style="color:#89DDFF;">]{</span></span>
<span class="line"><span style="color:#A6ACCD;">    conn</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">response_msg</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">str</span><span style="color:#89DDFF;">);</span><span style="color:#676E95;"> //requests handled in separate thread</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">}).</span><span style="color:#82AAFF;">detach</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><h2 id="asynchronous-mode" tabindex="-1">Asynchronous mode <a class="header-anchor" href="#asynchronous-mode" aria-hidden="true">#</a></h2><p>It is recommended to use coroutine on server development. However, the asynchronous call mode is also supported if user does not prefer coroutine.</p><ul><li>coroutine based rpc server</li></ul><div class="language-cpp"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki"><code><span class="line"><span style="color:#89DDFF;">#include</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#C3E88D;">coro_rpc/coro_rpc_server.hpp</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#FFCB6B;">std</span><span style="color:#89DDFF;">::</span><span style="color:#FFCB6B;">string</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">hello</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">return</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">hello coro_rpc</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">main</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  coro_rpc_server </span><span style="color:#82AAFF;">server</span><span style="color:#89DDFF;">(</span><span style="color:#676E95;">/*thread_num =*/</span><span style="color:#F78C6C;">10</span><span style="color:#89DDFF;">,</span><span style="color:#676E95;"> /*port =*/</span><span style="color:#F78C6C;">9000</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">  server</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">register_handler</span><span style="color:#89DDFF;">&lt;</span><span style="color:#A6ACCD;">hello</span><span style="color:#89DDFF;">&gt;();</span></span>
<span class="line"><span style="color:#A6ACCD;">  server</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">start</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><ul><li>Asynchronous rpc server</li></ul><div class="language-cpp"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki"><code><span class="line"><span style="color:#89DDFF;">#include</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#C3E88D;">coro_rpc/async_rpc_server.hpp</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#FFCB6B;">std</span><span style="color:#89DDFF;">::</span><span style="color:#FFCB6B;">string</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">hello</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">return</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">hello coro_rpc</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">main</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  async_rpc_server </span><span style="color:#82AAFF;">server</span><span style="color:#89DDFF;">(</span><span style="color:#676E95;">/*thread_num =*/</span><span style="color:#F78C6C;">10</span><span style="color:#89DDFF;">,</span><span style="color:#676E95;"> /*port =*/</span><span style="color:#F78C6C;">9000</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">  server</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">register_handler</span><span style="color:#89DDFF;">&lt;</span><span style="color:#A6ACCD;">hello</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> echo</span><span style="color:#89DDFF;">&gt;();</span></span>
<span class="line"><span style="color:#A6ACCD;">  server</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">start</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><p>Compile-time syntax checks coro_rpc does a compile-time check on the legality of the arguments when it is called, e.g.:</p><div class="language-cpp"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki"><code><span class="line"><span style="color:#C792EA;">inline</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">std</span><span style="color:#89DDFF;">::</span><span style="color:#FFCB6B;">string</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">echo</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">std</span><span style="color:#89DDFF;">::</span><span style="color:#FFCB6B;">string</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;">str</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">return</span><span style="color:#A6ACCD;"> str</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><p>When client is called via:</p><div class="language-cpp"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki"><code><span class="line"><span style="color:#A6ACCD;">client</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">call</span><span style="color:#89DDFF;">&lt;</span><span style="color:#A6ACCD;">echo</span><span style="color:#89DDFF;">&gt;(</span><span style="color:#F78C6C;">42</span><span style="color:#89DDFF;">);</span><span style="color:#676E95;">    //Parameter mismatch, compile error</span></span>
<span class="line"><span style="color:#A6ACCD;">client</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">call</span><span style="color:#89DDFF;">&lt;</span><span style="color:#A6ACCD;">echo</span><span style="color:#89DDFF;">&gt;();</span><span style="color:#676E95;">      //Missing parameters, compile error</span></span>
<span class="line"><span style="color:#A6ACCD;">client</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">call</span><span style="color:#89DDFF;">&lt;</span><span style="color:#A6ACCD;">echo</span><span style="color:#89DDFF;">&gt;(</span><span style="color:#89DDFF;">&quot;&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">);</span><span style="color:#676E95;"> //Redundant parameters, compile error</span></span>
<span class="line"><span style="color:#A6ACCD;">client</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">call</span><span style="color:#89DDFF;">&lt;</span><span style="color:#A6ACCD;">echo</span><span style="color:#89DDFF;">&gt;(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">hello, coro_rpc</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">);</span><span style="color:#676E95;">//Parameters match, OK</span></span>
<span class="line"></span></code></pre></div><h1 id="benchmark" tabindex="-1">Benchmark <a class="header-anchor" href="#benchmark" aria-hidden="true">#</a></h1><h2 id="system-configuration" tabindex="-1">System Configuration <a class="header-anchor" href="#system-configuration" aria-hidden="true">#</a></h2><p>Processor\uFF1AIntel(R) Xeon(R) Platinum 8163 CPU @2.50GHz 96Cores</p><p>OS: Linux version 4.9.151-015.ali3000.alios7.x86_64</p><p>Compiler\uFF1AAlibaba Clang13 C++20</p><h2 id="test-case" tabindex="-1">Test case <a class="header-anchor" href="#test-case" aria-hidden="true">#</a></h2><p>Both the client and server are on the same machine, sending requests using different amounts of connections to do echo tests.</p><h3 id="peak-qps-test" tabindex="-1">Peak QPS test <a class="header-anchor" href="#peak-qps-test" aria-hidden="true">#</a></h3><ol><li>Send data and receive data through a pipeline, put CPU under full load and get the highest qps<br><img src="`+o+'" alt="max_qps"></li></ol><h3 id="ping-pong-test" tabindex="-1">ping-pong test <a class="header-anchor" href="#ping-pong-test" aria-hidden="true">#</a></h3><ol><li>send the next request after the previous one is completed</li><li>check the QPS as the number of connections increases.</li><li>get the average latency of ping-pong<br><img src="'+p+'" alt="ping_pong_qps"><img src="'+e+'" alt="pingpong_time"></li></ol><h3 id="long-tail-test" tabindex="-1">long-tail test <a class="header-anchor" href="#long-tail-test" aria-hidden="true">#</a></h3><p><img src="'+t+'" alt="long_tail_qps"><img src="'+c+'" alt="long_tail_time"></p><h2 id="notes-on-benchmark-test" tabindex="-1">Notes on benchmark test <a class="header-anchor" href="#notes-on-benchmark-test" aria-hidden="true">#</a></h2><ol><li>grpc&#39;s QPS does not exceed 100,000, so it is not included in this benchmarking.</li><li>The client is a coro_rpc based client for both coro_rpc and brpc stress test. It has better stress test performance compared to a brpc client(With a brpc client, the brpc client will drop 50%).</li><li>brpc uses connection multiplexing, The actual number of socket connections is not that high(96)</li></ol><h1 id="known-limitations" tabindex="-1">Known Limitations <a class="header-anchor" href="#known-limitations" aria-hidden="true">#</a></h1><ol><li>Only little-endian is supported for now. Big-endian is working in progress</li><li>Only C++ is supported and could not work across languages now, will support other languages later; Compiler should support C++20(clang13, gcc10.2, msvc2022)</li><li>If any compile issue with <code>gcc -O3</code>, please try option <code>-fno-tree-slp-vectorize</code></li></ol>',67),D=[F];function y(i,C,A,d,h,u){return a(),n("div",null,D)}const _=s(r,[["render",y]]);export{m as __pageData,_ as default};
