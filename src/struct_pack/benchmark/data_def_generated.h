// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_DATADEF_MYGAME_FB_H_
#define FLATBUFFERS_GENERATED_DATADEF_MYGAME_FB_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 22 &&
              FLATBUFFERS_VERSION_MINOR == 10 &&
              FLATBUFFERS_VERSION_REVISION == 26,
             "Non-compatible flatbuffers version included");

namespace myGame {
namespace fb {

struct Vec3;

struct Weapon;
struct WeaponBuilder;

struct Monster;
struct MonsterBuilder;

struct Monsters;
struct MonstersBuilder;

struct rect32;

struct rect32s;
struct rect32sBuilder;

struct person;
struct personBuilder;

struct persons;
struct personsBuilder;

enum Color : int8_t {
  Color_Red = 0,
  Color_Green = 1,
  Color_Blue = 2,
  Color_MIN = Color_Red,
  Color_MAX = Color_Blue
};

inline const Color (&EnumValuesColor())[3] {
  static const Color values[] = {
    Color_Red,
    Color_Green,
    Color_Blue
  };
  return values;
}

inline const char * const *EnumNamesColor() {
  static const char * const names[4] = {
    "Red",
    "Green",
    "Blue",
    nullptr
  };
  return names;
}

inline const char *EnumNameColor(Color e) {
  if (flatbuffers::IsOutRange(e, Color_Red, Color_Blue)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesColor()[index];
}

enum Equipment : uint8_t {
  Equipment_NONE = 0,
  Equipment_Weapon = 1,
  Equipment_MIN = Equipment_NONE,
  Equipment_MAX = Equipment_Weapon
};

inline const Equipment (&EnumValuesEquipment())[2] {
  static const Equipment values[] = {
    Equipment_NONE,
    Equipment_Weapon
  };
  return values;
}

inline const char * const *EnumNamesEquipment() {
  static const char * const names[3] = {
    "NONE",
    "Weapon",
    nullptr
  };
  return names;
}

inline const char *EnumNameEquipment(Equipment e) {
  if (flatbuffers::IsOutRange(e, Equipment_NONE, Equipment_Weapon)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesEquipment()[index];
}

template<typename T> struct EquipmentTraits {
  static const Equipment enum_value = Equipment_NONE;
};

template<> struct EquipmentTraits<myGame::fb::Weapon> {
  static const Equipment enum_value = Equipment_Weapon;
};

bool VerifyEquipment(flatbuffers::Verifier &verifier, const void *obj, Equipment type);
bool VerifyEquipmentVector(flatbuffers::Verifier &verifier, const flatbuffers::Vector<flatbuffers::Offset<void>> *values, const flatbuffers::Vector<uint8_t> *types);

FLATBUFFERS_MANUALLY_ALIGNED_STRUCT(4) Vec3 FLATBUFFERS_FINAL_CLASS {
 private:
  float x_;
  float y_;
  float z_;

 public:
  Vec3()
      : x_(0),
        y_(0),
        z_(0) {
  }
  Vec3(float _x, float _y, float _z)
      : x_(flatbuffers::EndianScalar(_x)),
        y_(flatbuffers::EndianScalar(_y)),
        z_(flatbuffers::EndianScalar(_z)) {
  }
  float x() const {
    return flatbuffers::EndianScalar(x_);
  }
  float y() const {
    return flatbuffers::EndianScalar(y_);
  }
  float z() const {
    return flatbuffers::EndianScalar(z_);
  }
};
FLATBUFFERS_STRUCT_END(Vec3, 12);

FLATBUFFERS_MANUALLY_ALIGNED_STRUCT(4) rect32 FLATBUFFERS_FINAL_CLASS {
 private:
  int32_t x_;
  int32_t y_;
  int32_t width_;
  int32_t height_;

 public:
  rect32()
      : x_(0),
        y_(0),
        width_(0),
        height_(0) {
  }
  rect32(int32_t _x, int32_t _y, int32_t _width, int32_t _height)
      : x_(flatbuffers::EndianScalar(_x)),
        y_(flatbuffers::EndianScalar(_y)),
        width_(flatbuffers::EndianScalar(_width)),
        height_(flatbuffers::EndianScalar(_height)) {
  }
  int32_t x() const {
    return flatbuffers::EndianScalar(x_);
  }
  int32_t y() const {
    return flatbuffers::EndianScalar(y_);
  }
  int32_t width() const {
    return flatbuffers::EndianScalar(width_);
  }
  int32_t height() const {
    return flatbuffers::EndianScalar(height_);
  }
};
FLATBUFFERS_STRUCT_END(rect32, 16);

struct Weapon FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef WeaponBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_NAME = 4,
    VT_DAMAGE = 6
  };
  const flatbuffers::String *name() const {
    return GetPointer<const flatbuffers::String *>(VT_NAME);
  }
  int32_t damage() const {
    return GetField<int32_t>(VT_DAMAGE, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_NAME) &&
           verifier.VerifyString(name()) &&
           VerifyField<int32_t>(verifier, VT_DAMAGE, 4) &&
           verifier.EndTable();
  }
};

struct WeaponBuilder {
  typedef Weapon Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_name(flatbuffers::Offset<flatbuffers::String> name) {
    fbb_.AddOffset(Weapon::VT_NAME, name);
  }
  void add_damage(int32_t damage) {
    fbb_.AddElement<int32_t>(Weapon::VT_DAMAGE, damage, 0);
  }
  explicit WeaponBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<Weapon> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<Weapon>(end);
    return o;
  }
};

inline flatbuffers::Offset<Weapon> CreateWeapon(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> name = 0,
    int32_t damage = 0) {
  WeaponBuilder builder_(_fbb);
  builder_.add_damage(damage);
  builder_.add_name(name);
  return builder_.Finish();
}

inline flatbuffers::Offset<Weapon> CreateWeaponDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *name = nullptr,
    int32_t damage = 0) {
  auto name__ = name ? _fbb.CreateString(name) : 0;
  return myGame::fb::CreateWeapon(
      _fbb,
      name__,
      damage);
}

struct Monster FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef MonsterBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_POS = 4,
    VT_MANA = 6,
    VT_HP = 8,
    VT_NAME = 10,
    VT_INVENTORY = 14,
    VT_COLOR = 16,
    VT_WEAPONS = 18,
    VT_EQUIPPED = 20,
    VT_PATH = 22
  };
  const myGame::fb::Vec3 *pos() const {
    return GetStruct<const myGame::fb::Vec3 *>(VT_POS);
  }
  int32_t mana() const {
    return GetField<int32_t>(VT_MANA, 150);
  }
  int32_t hp() const {
    return GetField<int32_t>(VT_HP, 100);
  }
  const flatbuffers::String *name() const {
    return GetPointer<const flatbuffers::String *>(VT_NAME);
  }
  const flatbuffers::Vector<uint8_t> *inventory() const {
    return GetPointer<const flatbuffers::Vector<uint8_t> *>(VT_INVENTORY);
  }
  myGame::fb::Color color() const {
    return static_cast<myGame::fb::Color>(GetField<int8_t>(VT_COLOR, 2));
  }
  const flatbuffers::Vector<flatbuffers::Offset<myGame::fb::Weapon>> *weapons() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<myGame::fb::Weapon>> *>(VT_WEAPONS);
  }
  const myGame::fb::Weapon *equipped() const {
    return GetPointer<const myGame::fb::Weapon *>(VT_EQUIPPED);
  }
  const flatbuffers::Vector<const myGame::fb::Vec3 *> *path() const {
    return GetPointer<const flatbuffers::Vector<const myGame::fb::Vec3 *> *>(VT_PATH);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<myGame::fb::Vec3>(verifier, VT_POS, 4) &&
           VerifyField<int32_t>(verifier, VT_MANA, 4) &&
           VerifyField<int32_t>(verifier, VT_HP, 4) &&
           VerifyOffset(verifier, VT_NAME) &&
           verifier.VerifyString(name()) &&
           VerifyOffset(verifier, VT_INVENTORY) &&
           verifier.VerifyVector(inventory()) &&
           VerifyField<int8_t>(verifier, VT_COLOR, 1) &&
           VerifyOffset(verifier, VT_WEAPONS) &&
           verifier.VerifyVector(weapons()) &&
           verifier.VerifyVectorOfTables(weapons()) &&
           VerifyOffset(verifier, VT_EQUIPPED) &&
           verifier.VerifyTable(equipped()) &&
           VerifyOffset(verifier, VT_PATH) &&
           verifier.VerifyVector(path()) &&
           verifier.EndTable();
  }
};

struct MonsterBuilder {
  typedef Monster Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_pos(const myGame::fb::Vec3 *pos) {
    fbb_.AddStruct(Monster::VT_POS, pos);
  }
  void add_mana(int32_t mana) {
    fbb_.AddElement<int32_t>(Monster::VT_MANA, mana, 150);
  }
  void add_hp(int32_t hp) {
    fbb_.AddElement<int32_t>(Monster::VT_HP, hp, 100);
  }
  void add_name(flatbuffers::Offset<flatbuffers::String> name) {
    fbb_.AddOffset(Monster::VT_NAME, name);
  }
  void add_inventory(flatbuffers::Offset<flatbuffers::Vector<uint8_t>> inventory) {
    fbb_.AddOffset(Monster::VT_INVENTORY, inventory);
  }
  void add_color(myGame::fb::Color color) {
    fbb_.AddElement<int8_t>(Monster::VT_COLOR, static_cast<int8_t>(color), 2);
  }
  void add_weapons(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<myGame::fb::Weapon>>> weapons) {
    fbb_.AddOffset(Monster::VT_WEAPONS, weapons);
  }
  void add_equipped(flatbuffers::Offset<myGame::fb::Weapon> equipped) {
    fbb_.AddOffset(Monster::VT_EQUIPPED, equipped);
  }
  void add_path(flatbuffers::Offset<flatbuffers::Vector<const myGame::fb::Vec3 *>> path) {
    fbb_.AddOffset(Monster::VT_PATH, path);
  }
  explicit MonsterBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<Monster> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<Monster>(end);
    return o;
  }
};

inline flatbuffers::Offset<Monster> CreateMonster(
    flatbuffers::FlatBufferBuilder &_fbb,
    const myGame::fb::Vec3 *pos = nullptr,
    int32_t mana = 150,
    int32_t hp = 100,
    flatbuffers::Offset<flatbuffers::String> name = 0,
    flatbuffers::Offset<flatbuffers::Vector<uint8_t>> inventory = 0,
    myGame::fb::Color color = myGame::fb::Color_Blue,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<myGame::fb::Weapon>>> weapons = 0,
    flatbuffers::Offset<myGame::fb::Weapon> equipped = 0,
    flatbuffers::Offset<flatbuffers::Vector<const myGame::fb::Vec3 *>> path = 0) {
  MonsterBuilder builder_(_fbb);
  builder_.add_path(path);
  builder_.add_equipped(equipped);
  builder_.add_weapons(weapons);
  builder_.add_inventory(inventory);
  builder_.add_name(name);
  builder_.add_hp(hp);
  builder_.add_mana(mana);
  builder_.add_pos(pos);
  builder_.add_color(color);
  return builder_.Finish();
}

inline flatbuffers::Offset<Monster> CreateMonsterDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const myGame::fb::Vec3 *pos = nullptr,
    int32_t mana = 150,
    int32_t hp = 100,
    const char *name = nullptr,
    const std::vector<uint8_t> *inventory = nullptr,
    myGame::fb::Color color = myGame::fb::Color_Blue,
    const std::vector<flatbuffers::Offset<myGame::fb::Weapon>> *weapons = nullptr,
    flatbuffers::Offset<myGame::fb::Weapon> equipped = 0,
    const std::vector<myGame::fb::Vec3> *path = nullptr) {
  auto name__ = name ? _fbb.CreateString(name) : 0;
  auto inventory__ = inventory ? _fbb.CreateVector<uint8_t>(*inventory) : 0;
  auto weapons__ = weapons ? _fbb.CreateVector<flatbuffers::Offset<myGame::fb::Weapon>>(*weapons) : 0;
  auto path__ = path ? _fbb.CreateVectorOfStructs<myGame::fb::Vec3>(*path) : 0;
  return myGame::fb::CreateMonster(
      _fbb,
      pos,
      mana,
      hp,
      name__,
      inventory__,
      color,
      weapons__,
      equipped,
      path__);
}

struct Monsters FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef MonstersBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_MONSTERS = 4
  };
  const flatbuffers::Vector<flatbuffers::Offset<myGame::fb::Monster>> *monsters() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<myGame::fb::Monster>> *>(VT_MONSTERS);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_MONSTERS) &&
           verifier.VerifyVector(monsters()) &&
           verifier.VerifyVectorOfTables(monsters()) &&
           verifier.EndTable();
  }
};

struct MonstersBuilder {
  typedef Monsters Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_monsters(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<myGame::fb::Monster>>> monsters) {
    fbb_.AddOffset(Monsters::VT_MONSTERS, monsters);
  }
  explicit MonstersBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<Monsters> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<Monsters>(end);
    return o;
  }
};

inline flatbuffers::Offset<Monsters> CreateMonsters(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<myGame::fb::Monster>>> monsters = 0) {
  MonstersBuilder builder_(_fbb);
  builder_.add_monsters(monsters);
  return builder_.Finish();
}

inline flatbuffers::Offset<Monsters> CreateMonstersDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<flatbuffers::Offset<myGame::fb::Monster>> *monsters = nullptr) {
  auto monsters__ = monsters ? _fbb.CreateVector<flatbuffers::Offset<myGame::fb::Monster>>(*monsters) : 0;
  return myGame::fb::CreateMonsters(
      _fbb,
      monsters__);
}

struct rect32s FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef rect32sBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_RECT32_LIST = 4
  };
  const flatbuffers::Vector<const myGame::fb::rect32 *> *rect32_list() const {
    return GetPointer<const flatbuffers::Vector<const myGame::fb::rect32 *> *>(VT_RECT32_LIST);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_RECT32_LIST) &&
           verifier.VerifyVector(rect32_list()) &&
           verifier.EndTable();
  }
};

struct rect32sBuilder {
  typedef rect32s Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_rect32_list(flatbuffers::Offset<flatbuffers::Vector<const myGame::fb::rect32 *>> rect32_list) {
    fbb_.AddOffset(rect32s::VT_RECT32_LIST, rect32_list);
  }
  explicit rect32sBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<rect32s> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<rect32s>(end);
    return o;
  }
};

inline flatbuffers::Offset<rect32s> Createrect32s(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::Vector<const myGame::fb::rect32 *>> rect32_list = 0) {
  rect32sBuilder builder_(_fbb);
  builder_.add_rect32_list(rect32_list);
  return builder_.Finish();
}

inline flatbuffers::Offset<rect32s> Createrect32sDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<myGame::fb::rect32> *rect32_list = nullptr) {
  auto rect32_list__ = rect32_list ? _fbb.CreateVectorOfStructs<myGame::fb::rect32>(*rect32_list) : 0;
  return myGame::fb::Createrect32s(
      _fbb,
      rect32_list__);
}

struct person FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef personBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_AGE = 4,
    VT_NAME = 6,
    VT_ID = 8,
    VT_SALARY = 10
  };
  int32_t age() const {
    return GetField<int32_t>(VT_AGE, 0);
  }
  const flatbuffers::String *name() const {
    return GetPointer<const flatbuffers::String *>(VT_NAME);
  }
  int32_t id() const {
    return GetField<int32_t>(VT_ID, 0);
  }
  double salary() const {
    return GetField<double>(VT_SALARY, 0.0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, VT_AGE, 4) &&
           VerifyOffset(verifier, VT_NAME) &&
           verifier.VerifyString(name()) &&
           VerifyField<int32_t>(verifier, VT_ID, 4) &&
           VerifyField<double>(verifier, VT_SALARY, 8) &&
           verifier.EndTable();
  }
};

struct personBuilder {
  typedef person Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_age(int32_t age) {
    fbb_.AddElement<int32_t>(person::VT_AGE, age, 0);
  }
  void add_name(flatbuffers::Offset<flatbuffers::String> name) {
    fbb_.AddOffset(person::VT_NAME, name);
  }
  void add_id(int32_t id) {
    fbb_.AddElement<int32_t>(person::VT_ID, id, 0);
  }
  void add_salary(double salary) {
    fbb_.AddElement<double>(person::VT_SALARY, salary, 0.0);
  }
  explicit personBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<person> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<person>(end);
    return o;
  }
};

inline flatbuffers::Offset<person> Createperson(
    flatbuffers::FlatBufferBuilder &_fbb,
    int32_t age = 0,
    flatbuffers::Offset<flatbuffers::String> name = 0,
    int32_t id = 0,
    double salary = 0.0) {
  personBuilder builder_(_fbb);
  builder_.add_salary(salary);
  builder_.add_id(id);
  builder_.add_name(name);
  builder_.add_age(age);
  return builder_.Finish();
}

inline flatbuffers::Offset<person> CreatepersonDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    int32_t age = 0,
    const char *name = nullptr,
    int32_t id = 0,
    double salary = 0.0) {
  auto name__ = name ? _fbb.CreateString(name) : 0;
  return myGame::fb::Createperson(
      _fbb,
      age,
      name__,
      id,
      salary);
}

struct persons FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef personsBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_PERSON_LIST = 4
  };
  const flatbuffers::Vector<flatbuffers::Offset<myGame::fb::person>> *person_list() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<myGame::fb::person>> *>(VT_PERSON_LIST);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_PERSON_LIST) &&
           verifier.VerifyVector(person_list()) &&
           verifier.VerifyVectorOfTables(person_list()) &&
           verifier.EndTable();
  }
};

struct personsBuilder {
  typedef persons Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_person_list(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<myGame::fb::person>>> person_list) {
    fbb_.AddOffset(persons::VT_PERSON_LIST, person_list);
  }
  explicit personsBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<persons> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<persons>(end);
    return o;
  }
};

inline flatbuffers::Offset<persons> Createpersons(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<myGame::fb::person>>> person_list = 0) {
  personsBuilder builder_(_fbb);
  builder_.add_person_list(person_list);
  return builder_.Finish();
}

inline flatbuffers::Offset<persons> CreatepersonsDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<flatbuffers::Offset<myGame::fb::person>> *person_list = nullptr) {
  auto person_list__ = person_list ? _fbb.CreateVector<flatbuffers::Offset<myGame::fb::person>>(*person_list) : 0;
  return myGame::fb::Createpersons(
      _fbb,
      person_list__);
}

inline bool VerifyEquipment(flatbuffers::Verifier &verifier, const void *obj, Equipment type) {
  switch (type) {
    case Equipment_NONE: {
      return true;
    }
    case Equipment_Weapon: {
      auto ptr = reinterpret_cast<const myGame::fb::Weapon *>(obj);
      return verifier.VerifyTable(ptr);
    }
    default: return true;
  }
}

inline bool VerifyEquipmentVector(flatbuffers::Verifier &verifier, const flatbuffers::Vector<flatbuffers::Offset<void>> *values, const flatbuffers::Vector<uint8_t> *types) {
  if (!values || !types) return !values && !types;
  if (values->size() != types->size()) return false;
  for (flatbuffers::uoffset_t i = 0; i < values->size(); ++i) {
    if (!VerifyEquipment(
        verifier,  values->Get(i), types->GetEnum<Equipment>(i))) {
      return false;
    }
  }
  return true;
}

inline const myGame::fb::persons *Getpersons(const void *buf) {
  return flatbuffers::GetRoot<myGame::fb::persons>(buf);
}

inline const myGame::fb::persons *GetSizePrefixedpersons(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<myGame::fb::persons>(buf);
}

inline bool VerifypersonsBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<myGame::fb::persons>(nullptr);
}

inline bool VerifySizePrefixedpersonsBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<myGame::fb::persons>(nullptr);
}

inline void FinishpersonsBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<myGame::fb::persons> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedpersonsBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<myGame::fb::persons> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace fb
}  // namespace myGame

#endif  // FLATBUFFERS_GENERATED_DATADEF_MYGAME_FB_H_
