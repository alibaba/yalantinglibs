// protoc generate parameter
// clang-format off
// 
// =========================
#pragma once

// Generated by the protocol buffer compiler (struct_pb).  DO NOT EDIT!
// source: test_large_enum_value.proto

#include <limits>
#include <string>
#include <type_traits>
#include <memory>
#include <map>
#include <variant>
#include <vector>
#include <optional>
#include "struct_pb/struct_pb.hpp"

namespace protobuf_unittest {
struct TestLargeEnumValue;
struct TestLargeEnumValue {
  enum class EnumWithLargeValue: int {
    VALUE_1 = 1,
    VALUE_MAX = 2147483647,
  };
};

} // namespace protobuf_unittest
namespace struct_pb {
namespace internal {
// ::protobuf_unittest::TestLargeEnumValue
template<>
std::size_t get_needed_size<::protobuf_unittest::TestLargeEnumValue>(const ::protobuf_unittest::TestLargeEnumValue& t, const ::struct_pb::UnknownFields& unknown_fields);
template<>
void serialize_to<::protobuf_unittest::TestLargeEnumValue>(char* data, std::size_t size, const ::protobuf_unittest::TestLargeEnumValue& t, const ::struct_pb::UnknownFields& unknown_fields);
template<>
bool deserialize_to<::protobuf_unittest::TestLargeEnumValue>(::protobuf_unittest::TestLargeEnumValue& t, const char* data, std::size_t size, ::struct_pb::UnknownFields& unknown_fields);
template<>
bool deserialize_to<::protobuf_unittest::TestLargeEnumValue>(::protobuf_unittest::TestLargeEnumValue& t, const char* data, std::size_t size);

} // internal
} // struct_pb
// clang-format on
