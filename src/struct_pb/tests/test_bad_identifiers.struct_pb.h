// protoc generate parameter
// clang-format off
// 
// =========================
#include "struct_pb/struct_pb.hpp"
// Generated by the protocol buffer compiler (struct_pb).  DO NOT EDIT!
// source: test_bad_identifiers.proto

#pragma once

#include <limits>
#include <string>
#include <type_traits>
#include <memory>
#include <map>
#include <variant>
#include <vector>
#include <optional>

namespace protobuf_unittest {
struct TestConflictingSymbolNames;
struct TestConflictingSymbolNamesExtension;
struct TestConflictingEnumNames;
struct DummyMessage;
struct NULL_;
struct Shutdown;
struct TableStruct;
enum class bool_: int {
  default_ = 0,
  NOT_EQ = 1,
  volatile_ = 2,
  return_ = 3,
};
struct TestConflictingSymbolNames {
  enum class TestEnum: int {
    FOO = 0,
  };
  struct BuildDescriptors {
  };
  struct TypeTraits {
  };
  struct Data1 {
    std::vector<int32_t> data; // int32, field number = 1
  };
  struct Data2 {
    std::vector<::protobuf_unittest::TestConflictingSymbolNames::TestEnum> data; // enum, field number = 1
  };
  struct Data3 {
    std::vector<std::string> data; // string, field number = 1
  };
  struct Data4 {
    std::vector<::protobuf_unittest::TestConflictingSymbolNames::Data4> data; // message, field number = 1
  };
  struct Data5 {
    std::vector<std::string> data; // string, field number = 1
  };
  struct Data6 {
    std::vector<std::string> data; // string, field number = 1
  };
  struct Cord {
  };
  struct StringPiece {
  };
  struct DO {
  };
  std::optional<int32_t> input; // int32, field number = 1
  std::optional<int32_t> output; // int32, field number = 2
  std::string length; // string, field number = 3
  std::vector<int32_t> i; // int32, field number = 4
  std::vector<std::string> new_element; // string, field number = 5
  std::optional<int32_t> total_size; // int32, field number = 6
  std::optional<int32_t> tag; // int32, field number = 7
  std::optional<int32_t> source; // int32, field number = 8
  std::optional<int32_t> value; // int32, field number = 9
  std::optional<int32_t> file; // int32, field number = 10
  std::optional<int32_t> from; // int32, field number = 11
  std::optional<int32_t> handle_uninterpreted; // int32, field number = 12
  std::vector<int32_t> index; // int32, field number = 13
  std::optional<int32_t> controller; // int32, field number = 14
  std::optional<int32_t> already_here; // int32, field number = 15
  std::optional<uint32_t> uint32; // uint32, field number = 16
  std::optional<uint32_t> uint32_t_; // uint32, field number = 41
  std::optional<uint64_t> uint64; // uint64, field number = 17
  std::optional<uint32_t> uint64_t_; // uint32, field number = 42
  std::string string; // string, field number = 18
  std::optional<int32_t> memset_; // int32, field number = 19
  std::optional<int32_t> int32; // int32, field number = 20
  std::optional<int32_t> int32_t_; // int32, field number = 43
  std::optional<int64_t> int64; // int64, field number = 21
  std::optional<int64_t> int64_t_; // int64, field number = 44
  std::optional<int64_t> size_t_; // int64, field number = 45
  std::optional<uint32_t> cached_size; // uint32, field number = 22
  std::optional<uint32_t> extensions; // uint32, field number = 23
  std::optional<uint32_t> bit; // uint32, field number = 24
  std::optional<uint32_t> bits; // uint32, field number = 25
  std::optional<uint32_t> offsets; // uint32, field number = 26
  std::optional<uint32_t> reflection; // uint32, field number = 27
  std::string some_cord; // string, field number = 28
  std::string some_string_piece; // string, field number = 29
  std::optional<uint32_t> int_; // uint32, field number = 30
  std::optional<uint32_t> friend_; // uint32, field number = 31
  std::optional<uint32_t> class_; // uint32, field number = 37
  std::optional<uint32_t> typedecl; // uint32, field number = 39
  std::optional<uint32_t> auto_; // uint32, field number = 40
  std::unique_ptr<::protobuf_unittest::TestConflictingSymbolNames::DO> do_; // message, field number = 32
  std::optional<int32_t> field_type; // int32, field number = 33
  std::optional<bool> is_packed; // bool, field number = 34
  std::string release_length; // string, field number = 35
  std::unique_ptr<::protobuf_unittest::TestConflictingSymbolNames::DO> release_do; // message, field number = 36
  std::string target; // string, field number = 38
};
struct TestConflictingSymbolNamesExtension {
};
struct TestConflictingEnumNames {
  enum class while_: int {
    default_ = 0,
    and_ = 1,
    class_ = 2,
    int_ = 3,
    typedef_ = 4,
    XOR = 5,
  };
  std::optional<::protobuf_unittest::TestConflictingEnumNames::while_> conflicting_enum; // enum, field number = 1
};
struct DummyMessage {
};
struct NULL_ {
  std::optional<int32_t> int_; // int32, field number = 1
};
struct Shutdown {
};
struct TableStruct {
};

} // namespace protobuf_unittest
namespace struct_pb {
namespace internal {
// ::protobuf_unittest::TestConflictingSymbolNames::BuildDescriptors
std::size_t get_needed_size(const ::protobuf_unittest::TestConflictingSymbolNames::BuildDescriptors&, const ::struct_pb::UnknownFields& unknown_fields = {});
void serialize_to(char*, std::size_t, const ::protobuf_unittest::TestConflictingSymbolNames::BuildDescriptors&, const ::struct_pb::UnknownFields& unknown_fields = {});
bool deserialize_to(::protobuf_unittest::TestConflictingSymbolNames::BuildDescriptors&, const char*, std::size_t, ::struct_pb::UnknownFields& unknown_fields);
bool deserialize_to(::protobuf_unittest::TestConflictingSymbolNames::BuildDescriptors&, const char*, std::size_t);

// ::protobuf_unittest::TestConflictingSymbolNames::TypeTraits
std::size_t get_needed_size(const ::protobuf_unittest::TestConflictingSymbolNames::TypeTraits&, const ::struct_pb::UnknownFields& unknown_fields = {});
void serialize_to(char*, std::size_t, const ::protobuf_unittest::TestConflictingSymbolNames::TypeTraits&, const ::struct_pb::UnknownFields& unknown_fields = {});
bool deserialize_to(::protobuf_unittest::TestConflictingSymbolNames::TypeTraits&, const char*, std::size_t, ::struct_pb::UnknownFields& unknown_fields);
bool deserialize_to(::protobuf_unittest::TestConflictingSymbolNames::TypeTraits&, const char*, std::size_t);

// ::protobuf_unittest::TestConflictingSymbolNames::Data1
std::size_t get_needed_size(const ::protobuf_unittest::TestConflictingSymbolNames::Data1&, const ::struct_pb::UnknownFields& unknown_fields = {});
void serialize_to(char*, std::size_t, const ::protobuf_unittest::TestConflictingSymbolNames::Data1&, const ::struct_pb::UnknownFields& unknown_fields = {});
bool deserialize_to(::protobuf_unittest::TestConflictingSymbolNames::Data1&, const char*, std::size_t, ::struct_pb::UnknownFields& unknown_fields);
bool deserialize_to(::protobuf_unittest::TestConflictingSymbolNames::Data1&, const char*, std::size_t);

// ::protobuf_unittest::TestConflictingSymbolNames::Data2
std::size_t get_needed_size(const ::protobuf_unittest::TestConflictingSymbolNames::Data2&, const ::struct_pb::UnknownFields& unknown_fields = {});
void serialize_to(char*, std::size_t, const ::protobuf_unittest::TestConflictingSymbolNames::Data2&, const ::struct_pb::UnknownFields& unknown_fields = {});
bool deserialize_to(::protobuf_unittest::TestConflictingSymbolNames::Data2&, const char*, std::size_t, ::struct_pb::UnknownFields& unknown_fields);
bool deserialize_to(::protobuf_unittest::TestConflictingSymbolNames::Data2&, const char*, std::size_t);

// ::protobuf_unittest::TestConflictingSymbolNames::Data3
std::size_t get_needed_size(const ::protobuf_unittest::TestConflictingSymbolNames::Data3&, const ::struct_pb::UnknownFields& unknown_fields = {});
void serialize_to(char*, std::size_t, const ::protobuf_unittest::TestConflictingSymbolNames::Data3&, const ::struct_pb::UnknownFields& unknown_fields = {});
bool deserialize_to(::protobuf_unittest::TestConflictingSymbolNames::Data3&, const char*, std::size_t, ::struct_pb::UnknownFields& unknown_fields);
bool deserialize_to(::protobuf_unittest::TestConflictingSymbolNames::Data3&, const char*, std::size_t);

// ::protobuf_unittest::TestConflictingSymbolNames::Data4
std::size_t get_needed_size(const ::protobuf_unittest::TestConflictingSymbolNames::Data4&, const ::struct_pb::UnknownFields& unknown_fields = {});
void serialize_to(char*, std::size_t, const ::protobuf_unittest::TestConflictingSymbolNames::Data4&, const ::struct_pb::UnknownFields& unknown_fields = {});
bool deserialize_to(::protobuf_unittest::TestConflictingSymbolNames::Data4&, const char*, std::size_t, ::struct_pb::UnknownFields& unknown_fields);
bool deserialize_to(::protobuf_unittest::TestConflictingSymbolNames::Data4&, const char*, std::size_t);

// ::protobuf_unittest::TestConflictingSymbolNames::Data5
std::size_t get_needed_size(const ::protobuf_unittest::TestConflictingSymbolNames::Data5&, const ::struct_pb::UnknownFields& unknown_fields = {});
void serialize_to(char*, std::size_t, const ::protobuf_unittest::TestConflictingSymbolNames::Data5&, const ::struct_pb::UnknownFields& unknown_fields = {});
bool deserialize_to(::protobuf_unittest::TestConflictingSymbolNames::Data5&, const char*, std::size_t, ::struct_pb::UnknownFields& unknown_fields);
bool deserialize_to(::protobuf_unittest::TestConflictingSymbolNames::Data5&, const char*, std::size_t);

// ::protobuf_unittest::TestConflictingSymbolNames::Data6
std::size_t get_needed_size(const ::protobuf_unittest::TestConflictingSymbolNames::Data6&, const ::struct_pb::UnknownFields& unknown_fields = {});
void serialize_to(char*, std::size_t, const ::protobuf_unittest::TestConflictingSymbolNames::Data6&, const ::struct_pb::UnknownFields& unknown_fields = {});
bool deserialize_to(::protobuf_unittest::TestConflictingSymbolNames::Data6&, const char*, std::size_t, ::struct_pb::UnknownFields& unknown_fields);
bool deserialize_to(::protobuf_unittest::TestConflictingSymbolNames::Data6&, const char*, std::size_t);

// ::protobuf_unittest::TestConflictingSymbolNames::Cord
std::size_t get_needed_size(const ::protobuf_unittest::TestConflictingSymbolNames::Cord&, const ::struct_pb::UnknownFields& unknown_fields = {});
void serialize_to(char*, std::size_t, const ::protobuf_unittest::TestConflictingSymbolNames::Cord&, const ::struct_pb::UnknownFields& unknown_fields = {});
bool deserialize_to(::protobuf_unittest::TestConflictingSymbolNames::Cord&, const char*, std::size_t, ::struct_pb::UnknownFields& unknown_fields);
bool deserialize_to(::protobuf_unittest::TestConflictingSymbolNames::Cord&, const char*, std::size_t);

// ::protobuf_unittest::TestConflictingSymbolNames::StringPiece
std::size_t get_needed_size(const ::protobuf_unittest::TestConflictingSymbolNames::StringPiece&, const ::struct_pb::UnknownFields& unknown_fields = {});
void serialize_to(char*, std::size_t, const ::protobuf_unittest::TestConflictingSymbolNames::StringPiece&, const ::struct_pb::UnknownFields& unknown_fields = {});
bool deserialize_to(::protobuf_unittest::TestConflictingSymbolNames::StringPiece&, const char*, std::size_t, ::struct_pb::UnknownFields& unknown_fields);
bool deserialize_to(::protobuf_unittest::TestConflictingSymbolNames::StringPiece&, const char*, std::size_t);

// ::protobuf_unittest::TestConflictingSymbolNames::DO
std::size_t get_needed_size(const ::protobuf_unittest::TestConflictingSymbolNames::DO&, const ::struct_pb::UnknownFields& unknown_fields = {});
void serialize_to(char*, std::size_t, const ::protobuf_unittest::TestConflictingSymbolNames::DO&, const ::struct_pb::UnknownFields& unknown_fields = {});
bool deserialize_to(::protobuf_unittest::TestConflictingSymbolNames::DO&, const char*, std::size_t, ::struct_pb::UnknownFields& unknown_fields);
bool deserialize_to(::protobuf_unittest::TestConflictingSymbolNames::DO&, const char*, std::size_t);

// ::protobuf_unittest::TestConflictingSymbolNames
std::size_t get_needed_size(const ::protobuf_unittest::TestConflictingSymbolNames&, const ::struct_pb::UnknownFields& unknown_fields = {});
void serialize_to(char*, std::size_t, const ::protobuf_unittest::TestConflictingSymbolNames&, const ::struct_pb::UnknownFields& unknown_fields = {});
bool deserialize_to(::protobuf_unittest::TestConflictingSymbolNames&, const char*, std::size_t, ::struct_pb::UnknownFields& unknown_fields);
bool deserialize_to(::protobuf_unittest::TestConflictingSymbolNames&, const char*, std::size_t);

// ::protobuf_unittest::TestConflictingSymbolNamesExtension
std::size_t get_needed_size(const ::protobuf_unittest::TestConflictingSymbolNamesExtension&, const ::struct_pb::UnknownFields& unknown_fields = {});
void serialize_to(char*, std::size_t, const ::protobuf_unittest::TestConflictingSymbolNamesExtension&, const ::struct_pb::UnknownFields& unknown_fields = {});
bool deserialize_to(::protobuf_unittest::TestConflictingSymbolNamesExtension&, const char*, std::size_t, ::struct_pb::UnknownFields& unknown_fields);
bool deserialize_to(::protobuf_unittest::TestConflictingSymbolNamesExtension&, const char*, std::size_t);

// ::protobuf_unittest::TestConflictingEnumNames
std::size_t get_needed_size(const ::protobuf_unittest::TestConflictingEnumNames&, const ::struct_pb::UnknownFields& unknown_fields = {});
void serialize_to(char*, std::size_t, const ::protobuf_unittest::TestConflictingEnumNames&, const ::struct_pb::UnknownFields& unknown_fields = {});
bool deserialize_to(::protobuf_unittest::TestConflictingEnumNames&, const char*, std::size_t, ::struct_pb::UnknownFields& unknown_fields);
bool deserialize_to(::protobuf_unittest::TestConflictingEnumNames&, const char*, std::size_t);

// ::protobuf_unittest::DummyMessage
std::size_t get_needed_size(const ::protobuf_unittest::DummyMessage&, const ::struct_pb::UnknownFields& unknown_fields = {});
void serialize_to(char*, std::size_t, const ::protobuf_unittest::DummyMessage&, const ::struct_pb::UnknownFields& unknown_fields = {});
bool deserialize_to(::protobuf_unittest::DummyMessage&, const char*, std::size_t, ::struct_pb::UnknownFields& unknown_fields);
bool deserialize_to(::protobuf_unittest::DummyMessage&, const char*, std::size_t);

// ::protobuf_unittest::NULL_
std::size_t get_needed_size(const ::protobuf_unittest::NULL_&, const ::struct_pb::UnknownFields& unknown_fields = {});
void serialize_to(char*, std::size_t, const ::protobuf_unittest::NULL_&, const ::struct_pb::UnknownFields& unknown_fields = {});
bool deserialize_to(::protobuf_unittest::NULL_&, const char*, std::size_t, ::struct_pb::UnknownFields& unknown_fields);
bool deserialize_to(::protobuf_unittest::NULL_&, const char*, std::size_t);

// ::protobuf_unittest::Shutdown
std::size_t get_needed_size(const ::protobuf_unittest::Shutdown&, const ::struct_pb::UnknownFields& unknown_fields = {});
void serialize_to(char*, std::size_t, const ::protobuf_unittest::Shutdown&, const ::struct_pb::UnknownFields& unknown_fields = {});
bool deserialize_to(::protobuf_unittest::Shutdown&, const char*, std::size_t, ::struct_pb::UnknownFields& unknown_fields);
bool deserialize_to(::protobuf_unittest::Shutdown&, const char*, std::size_t);

// ::protobuf_unittest::TableStruct
std::size_t get_needed_size(const ::protobuf_unittest::TableStruct&, const ::struct_pb::UnknownFields& unknown_fields = {});
void serialize_to(char*, std::size_t, const ::protobuf_unittest::TableStruct&, const ::struct_pb::UnknownFields& unknown_fields = {});
bool deserialize_to(::protobuf_unittest::TableStruct&, const char*, std::size_t, ::struct_pb::UnknownFields& unknown_fields);
bool deserialize_to(::protobuf_unittest::TableStruct&, const char*, std::size_t);

} // internal
} // struct_pb
// clang-format on
