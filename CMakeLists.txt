cmake_minimum_required(VERSION 3.15)
project(yaLanTingLibs
        VERSION 1.0.0
        DESCRIPTION "yaLanTingLibs"
        HOMEPAGE_URL "https://github.com/alibaba/yalantinglibs"
        LANGUAGES CXX
        )
set(CMAKE_CXX_STANDARD 20)
set(CMAKE_CXX_STANDARD_REQUIRED ON)
list(APPEND CMAKE_MODULE_PATH ${PROJECT_SOURCE_DIR}/cmake)
message(STATUS "CMAKE_MODULE_PATH: ${CMAKE_MODULE_PATH}")
find_package(Threads REQUIRED)
if (CMAKE_CXX_COMPILER_ID STREQUAL "GNU")
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -fcoroutines")
#-ftree-slp-vectorize with coroutine cause link error. disable it util gcc fix.
    set(CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE} -fno-tree-slp-vectorize")
else ()
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS}")
endif ()
if (NOT CMAKE_BUILD_TYPE)
    set(CMAKE_BUILD_TYPE "Release")
endif ()
message(STATUS "Build type: ${CMAKE_BUILD_TYPE}")
if (NOT CMAKE_CXX_COMPILER_ID MATCHES "MSVC")
    if (CMAKE_BUILD_TYPE STREQUAL "Debug")
        include(CheckASan)
        check_asan(HAVE_ASAN)
        if (HAVE_ASAN)
            message("-- Use flag -fsanitize=address")
            set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -fsanitize=address")
        else ()
            message(WARNING "asan not found, you'd better install it for better code security!")
        endif ()
    endif ()
endif ()
# Resolves C1128 complained by MSVC: number of sections exceeded object file format limit: compile with /bigobj.
add_compile_options("$<$<CXX_COMPILER_ID:MSVC>:/bigobj>")
option(COVERAGE_TEST "Build with unit test coverage" OFF)
if (COVERAGE_TEST)
    message(STATUS "add coverage flags")
    if (CMAKE_CXX_COMPILER_ID STREQUAL "GNU")
        set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -fprofile-arcs -ftest-coverage --coverage")
    else ()
        set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -fprofile-instr-generate -fcoverage-mapping")
    endif ()

endif ()
option(BUILD_WITH_LIBCXX "Build with libc++" OFF)
if (BUILD_WITH_LIBCXX AND CMAKE_CXX_COMPILER_ID STREQUAL "Clang")
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -stdlib=libc++")
    message(STATUS "Build with libc++")
else ()
    message(STATUS "Build with libstdc++")
endif ()
include_directories(include)
option(USE_CONAN "Use conan package manager" OFF)
if (USE_CONAN)
    message(STATUS "Use conan package manager")
    find_package(asio REQUIRED)
    find_package(spdlog REQUIRED)
else ()
    add_subdirectory(thirdparty)
endif ()
set(yaLanTingLibs_ALL_PROJECTS "struct_pack;coro_rpc;util")
set(yaLanTingLibs_ENABLE_PROJECTS "all" CACHE STRING
        "Semicolon-separated list of projects to build (${yaLanTingLibs_ALL_PROJECTS}), or \"all\".")
if (yaLanTingLibs_ENABLE_PROJECTS STREQUAL "all")
    set(yaLanTingLibs_ENABLE_PROJECTS ${yaLanTingLibs_ALL_PROJECTS})
endif ()
option(BUILD_EXAMPLES "Build examples" ON)
option(BUILD_UNIT_TESTS "Build unit tests" ON)
option(BUILD_BENCHMARK "Build benchmark" ON)
option(BUILD_SP_BENCHMARK "Build struct_pack benchmark" OFF)
if (BUILD_UNIT_TESTS)
    enable_testing()
endif ()
message(STATUS "yaLanTingLibs_ENABLE_PROJECTS: ${yaLanTingLibs_ENABLE_PROJECTS}")
foreach (proj ${yaLanTingLibs_ENABLE_PROJECTS})
    if (NOT "${proj}" IN_LIST yaLanTingLibs_ALL_PROJECTS)
        message(FATAL_ERROR "${proj} isn't a known project: ${yaLanTingLibs_ALL_PROJECTS}.")
    endif ()
    add_subdirectory(src/${proj})
    if (BUILD_EXAMPLES)
        message(STATUS "Build examples: src/${proj}/examples")
        add_subdirectory(src/${proj}/examples)
    endif ()
    if (BUILD_UNIT_TESTS)
        message(STATUS "Build unit tests: src/${proj}/tests")
        add_subdirectory(src/${proj}/tests)
    endif ()
    if (BUILD_BENCHMARK)
        if (${proj} STREQUAL "struct_pack")
            if (BUILD_SP_BENCHMARK)
                message(STATUS "Build benchmark: src/${proj}/benchmark")
                add_subdirectory(src/${proj}/benchmark)
            endif()
        else()
            message(STATUS "Build benchmark: src/${proj}/benchmark")
            add_subdirectory(src/${proj}/benchmark)
        endif()
    endif ()
endforeach ()

install(DIRECTORY include DESTINATION include)
